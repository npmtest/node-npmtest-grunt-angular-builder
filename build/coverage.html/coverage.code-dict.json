{"/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/test.js":"/* istanbul instrument in package npmtest_grunt_angular_builder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/lib.npmtest_grunt_angular_builder.js":"/* istanbul instrument in package npmtest_grunt_angular_builder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_angular_builder = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_angular_builder = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-angular-builder && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_angular_builder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_angular_builder\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_angular_builder.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_grunt_angular_builder.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_angular_builder.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_grunt_angular_builder.__dirname +\n                    '/lib.npmtest_grunt_angular_builder.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/Gruntfile.js":"/*\n * grunt-angular-builder\n * https://github.com/claudio-silva/grunt-angular-builder\n *\n * Copyright (c) 2013 Cláudio Silva\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt)\n{\n  require ('time-grunt') (grunt);\n\n  // Project configuration.\n  grunt.initConfig ({\n\n    jshint: {\n      all:     [\n        'Gruntfile.js',\n        'tasks/**/*.js'\n      ],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean:  {\n      tests: ['tmp', 'dist']\n    },\n\n    'angular-builder': {\n      'test-js-app':              {\n        options: {\n          mainModule:      'App',\n          externalModules: 'Library1'\n        },\n        src:     'tests/js-only/**/*.js',\n        dest:    'dist/main.js'\n      },\n      'test-js-lib':              {\n        options: {\n          mainModule:   'Library1',\n          releaseBuild: {\n            renameModuleRefs: true\n          }\n        },\n        src:     'tests/js-only/**/*.js',\n        dest:    'dist/library1.js'\n      },\n      'test-js-fail':             {\n        /** Warning: The module variable reference declare doesn't match the preset name\n         on the config setting moduleVar='module'. File: tests/js-only/extra/Submodule4.js */\n        options: {\n          mainModule: 'Library2'\n        },\n        src:     'tests/js-only/**/*.js',\n        dest:    'dist/library2.js'\n      },\n      'test-js-comments':         {\n        options: {\n          mainModule: 'Library3'\n        },\n        src:     'tests/js-only/**/*.js',\n        dest:    'dist/library3.js'\n      },\n      'test-stylesheets':         {\n        options: {\n          mainModule: 'Submodule1'\n        },\n        src:     [\n          'tests/stylesheets/submodule1/**/*.js',\n          'tests/stylesheets/submodule2/**/*.js'\n        ],\n        dest:    'dist/main.js'\n      },\n      'test-assets':              {\n        options: {\n          mainModule: 'App',\n          assets:     {\n            enabled:   true,\n            targetDir: 'styles',\n            symlink:   true\n          }\n        },\n        src:     'tests/stylesheets/**/*.js',\n        dest:    'dist/main.js'\n      },\n      'test-3rd-party':           {\n        options:      {\n          mainModule: 'App'\n        },\n        src:          'tests/3rd-party/**/*.js',\n        dest:         'dist/main.js',\n        forceInclude: 'tests/3rd-party/angular-loader.js'\n      },\n      'test-include-non-angular': {\n        options:      {\n          mainModule: 'App'\n        },\n        src:          'tests/include-non-angular/**/*.js',\n        dest:         'dist/main.js',\n        forceInclude: 'tests/include-non-angular/other/other.js'\n      },\n      'test-include-and-rebase':  {\n        options:      {\n          mainModule:   'App',\n          debugBuild:   {\n            rebaseDebugUrls: [\n              { match: /other\\//, replaceWith: '' }, //remove path segment\n              { match: /tests\\/include-non-angular/, replaceWith: 'js' }, //replace base path\n              { match: /^.*demo.js$/, replaceWith: '' } //suppress library\n            ]\n          }\n        },\n        src:          'tests/include-non-angular/**/*.js',\n        dest:         'dist/main.js',\n        forceInclude: 'tests/include-non-angular/other/other.js'\n      },\n      'test-override-deps':       {\n        options: {\n          mainModule:           'App',\n          overrideDependencies: {\n            dependencies: ['Submodule1', 'Library1']\n          }\n        },\n        src:     ['tests/js-only/**/*.js', '!tests/js-only/App.js'],\n        dest:    'dist/main.js'\n      },\n      'test-slashes':       {\n        options: {\n          mainModule:           'App'\n        },\n        src:     ['tests/slashes/**/*.js'],\n        dest:    'dist/main.js'\n      }\n    },\n\n    concat: {\n      'test-stylesheets': {\n        src:  '<%= requiredStylesheets %>',\n        dest: 'dist/styles.css'\n      },\n      'test-assets':      {\n        src:  '<%= requiredStylesheets %>',\n        dest: 'dist/styles/styles.css'\n      },\n      '3rd-party':        {\n        src:  'tests/3rd-party/index.html',\n        dest: 'dist/index.html'\n      }\n    },\n\n    jsdoc: {\n      dist: {\n        // Force usage of JSDoc 3.3.0\n        jsdoc:   \"./node_modules/.bin/jsdoc\",\n        src:     ['tasks/**/*.js'],\n        options: {\n          destination: 'doc',\n          configure:   'jsdoc.json'\n        }\n      }\n    }\n\n  });\n\n  // Load this plugin's task(s).\n  grunt.loadTasks ('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks ('grunt-contrib-jshint');\n  grunt.loadNpmTasks ('grunt-contrib-clean');\n  grunt.loadNpmTasks ('grunt-contrib-concat');\n  grunt.loadNpmTasks ('grunt-jsdoc');\n\n  // By default, lint and run all tests.\n  grunt.registerTask ('default', ['jshint']);\n\n  grunt.registerTask ('doc', ['jsdoc']);\n\n  // Test tasks below can also be executed with the command line option `--build debug` to generate debug builds.\n\n  grunt.registerTask ('test', [\n    'test-js-app',\n    'test-js-lib',\n    //'test-js-fail',\n    'test-js-comments',\n    'test-stylesheets',\n    'test-assets',\n    'test-3rd-party',\n    'test-include-non-angular',\n    'test-override-deps'\n  ]);\n\n  grunt.registerTask ('test-js-app', ['clean', 'angular-builder:test-js-app']);\n  grunt.registerTask ('test-js-lib', ['clean', 'angular-builder:test-js-lib']);\n  grunt.registerTask ('test-js-fail', ['clean', 'angular-builder:test-js-fail']);\n  grunt.registerTask ('test-js-comments', ['clean', 'angular-builder:test-js-comments']);\n  grunt.registerTask ('test-stylesheets', ['clean', 'angular-builder:test-stylesheets', 'concat:test-stylesheets']);\n  grunt.registerTask ('test-assets', ['clean', 'angular-builder:test-assets', 'concat:test-assets']);\n  grunt.registerTask ('test-3rd-party', ['clean', 'angular-builder:test-3rd-party', 'concat:3rd-party']);\n  grunt.registerTask ('test-include-non-angular', ['clean', 'angular-builder:test-include-non-angular']);\n  grunt.registerTask ('test-include-and-rebase', ['clean', 'angular-builder:test-include-and-rebase::debug']);\n  grunt.registerTask ('test-override-deps', ['clean', 'angular-builder:test-override-deps']);\n  grunt.registerTask ('test-slashes', ['clean', 'angular-builder:test-slashes::debug']);\n\n};","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/angular-builder.js":"/**\n * @license\n * AngularJS Builder.\n * Copyright 2013 Cláudio Manuel Brás da Silva.\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar TASK_NAME = 'angular-builder';\n\nvar TASK_DESCRIPTION = 'Generates a release/debug build of an AngularJS project.';\n\n/**\n * Utility functions.\n */\nvar util = require ('./lib/gruntUtil')\n  , types = require ('./lib/types');\n\nvar Context = types.Context\n  , ContextEvent = types.ContextEvent\n  , TaskOptions = types.TaskOptions\n  , extend = util.extend\n  , fatal = util.fatal\n  , info = util.info;\n/**\n * Exports a function that will be called by Grunt to register tasks for this plugin.\n * @param grunt The Grunt API.\n */\nmodule.exports = function (grunt)\n{\n  util.init (grunt);\n\n//------------------------------------------------------------------------------\n// GRUNT TASK\n//------------------------------------------------------------------------------\n\n  grunt.registerMultiTask (TASK_NAME, TASK_DESCRIPTION, function ()\n  {\n    //------------------\n    // SETUP\n    //------------------\n\n    if (!this.files.length)\n      fatal ('No source files were defined.');\n\n    /**\n     * The default values for all of the Angular Builder's options.\n     * @type {TaskOptions}\n     */\n    var defaultOptions = new TaskOptions ();\n\n    /**\n     * An ordered list of middleware classes from which the middleware stack will be created later on.\n     *\n     * Note: when loading the middleware modules, the TaskOptions class becomes augmented with middleware-specific\n     * options.\n     * @type {MiddlewareInterface[]}\n     */\n    var middlewareStackClasses = loadMiddlewareModules (defaultOptions);\n\n    //-------------------------\n    // Process each file group\n    //-------------------------\n\n    this.files.forEach (function (/** GruntFilesArrayExt */ fileGroup)\n    {\n      // Note: source code analysis information for each file group is reset for each file group,\n      // i.e. each group is an independent build.\n\n      var context = new Context (grunt, this, defaultOptions);\n\n      if (!context.options.mainModule)\n        fatal ('No main module is defined.');\n\n      /**\n       * The sequential list of loaded middleare.\n       * These will be reset for each file group.\n       * @type {MiddlewareInterface[]}\n       */\n      var middlewareStack = assembleMiddleware (middlewareStackClasses, context);\n\n      context.trigger (ContextEvent.ON_INIT);\n\n      //------------------\n      // LOAD SOURCE CODE\n      //------------------\n\n      if (!fileGroup.dest)\n        fatal ('No target script is defined.');\n\n      // Pass all the source code trough the 1st stage of the middleware stack.\n\n      middlewareStack.forEach (function (/*MiddlewareInterface*/ middleware)\n      {\n        middleware.analyze (fileGroup);\n      });\n\n      context.trigger (ContextEvent.ON_AFTER_ANALYZE);\n\n      //------------------\n      // BUILD\n      //------------------\n\n      // Trace the dependency graph and pass each module trough the 2nd stage of the middleware stack.\n\n      traceModule (context.options.mainModule, context, function (/*ModuleDef*/module)\n      {\n        middlewareStack.forEach (function (/*MiddlewareInterface*/ middleare)\n        {\n          middleare.trace (module);\n        });\n      });\n\n      context.trigger (ContextEvent.ON_AFTER_TRACE);\n\n      // Pass all the analysed source code trough the 3rd stage of the middleware stack.\n\n      middlewareStack.forEach (function (/*MiddlewareInterface*/ middleware)\n      {\n        middleware.build (fileGroup.dest);\n      });\n\n      context.trigger (ContextEvent.ON_AFTER_BUILD);\n\n    }.bind (this));\n  });\n\n  /**\n   * Loads all middlewares (both internal and external).\n   *\n   * @param {TaskOptions} options The task's base default options. Extended options contributed by middleware will be\n   * set in turn by each loaded middleware module.\n   * @return {Array}\n   */\n  function loadMiddlewareModules (options)\n  {\n    var middlewareStackClasses = [];\n\n    options.internalMiddleware.forEach (function (moduleName)\n    {\n      var module = require (moduleName);\n      if (!module.middleware)\n        util.fatal ('No middleware found on module %.', moduleName);\n      if (module.options)\n        extend (options, module.options);\n      middlewareStackClasses.push (module.middleware);\n    });\n\n    if (options.externalMiddleware)\n      options.externalMiddleware.forEach (function (info)\n      {\n        var module = require (info.load);\n        if (module.options)\n          extend (options, new module.options ());\n        var target = info.before || info.after\n          , i = middlewareStackClasses.indexOf (target);\n        if (~i)\n          util.fatal (\"Can't locate the % middleware module for inserting %.\", target, info.load);\n        middlewareStackClasses.splice (i + (info.before ? 0 : 1), 0, module.middleware);\n      });\n\n    return middlewareStackClasses;\n  }\n\n  /**\n   * Creates a new instance of each loaded middleware and assembles them into a sequential list.\n   * @param {MiddlewareInterface[]} middlewareStackClasses An ordered list of classes to be instantiated.\n   * @param {Context} context The build execution context.\n   * @returns {MiddlewareInterface[]}\n   */\n  function assembleMiddleware (middlewareStackClasses, context)\n  {\n    var middlewares = [];\n    middlewareStackClasses.forEach (function (MiddlewareClass)\n    {\n      middlewares.push (new MiddlewareClass (context));\n    });\n    return middlewares;\n  }\n\n  /**\n   * Traces a dependency graph for the specified module and calls the given callback\n   * to process each required module in the correct loading order.\n   * @param {string} moduleName\n   * @param {Context} context The execution context for the middleware stack.\n   * @param {function(ModuleDef)} processHook\n   */\n  function traceModule (moduleName, context, processHook)\n  {\n    var module = context.modules[moduleName];\n    if (!module)\n      fatal ('Module <cyan>%</cyan> was not found.', moduleName);\n    // Ignore the module if it's external.\n    if (module.external)\n      return;\n    // Include required submodules first.\n    if (module.requires) {\n      module.requires.forEach (function (modName)\n      {\n        traceModule (modName, context, processHook);\n      });\n    }\n    // Ignore references to already loaded modules or to explicitly excluded modules.\n    if (!context.loaded[module.name] && !~context.options.excludedModules.indexOf (module.name)) {\n      info ('Including module <cyan>%</cyan>.', moduleName);\n      context.loaded[module.name] = true;\n      processHook (module);\n    }\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/lib/gruntUtil.js":"/**\n * A set of utility functions for use with Grunt.\n *\n * @module lib/gruntUtil\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\n/**\n * Test\n * @type {exports}\n */\nvar nodeUtil = require ('util');\n\n/*\n * Get color and style in your node.js console.\n * Note: requiring this here modifies the String prototype!\n */\nrequire ('colors');\n\n/**\n * OS dependent line terminator.\n * @type {string}\n */\nvar NL = process.platform === 'win32' ? '\\r\\n' : '\\n';\n\n/**\n * The Grunt instance.\n */\nvar grunt;\n/**\n * <code>true</code> if the task is running in verbose mode.\n * @type {boolean}\n */\nvar verbose;\n\n//------------------------------------------------------------------------------\n// PUBLIC\n//------------------------------------------------------------------------------\n\nexports.csprintf = csprintf;\nexports.icsprintf = icsprintf;\nexports.NL = NL;\n\n/**\n * Initializes the gruntUtil module.\n * You MUST call this function before using most other functions in this module.\n * @param gruntInstance\n */\nexports.init = function (gruntInstance)\n{\n  grunt = gruntInstance;\n  verbose = grunt.option ('verbose');\n};\n\n/**\n * Copies properties recursively from each of the source objects to the target object.\n *\n * Variable arguments: {...Object} Source objects.\n *\n * Notes:\n * - Properties inherited from the prototype chain are also copied.\n * - Copied properties of object type are merged with the target.\n * - Copied properties of array type are not merged, they are are cloned (the array items are still the original).\n *\n * @param {Object} t Target.\n */\nexports.extend = function extend (t)\n{\n  if (t === null || t === undefined)\n    t = {};\n  else if (typeof t !== 'object')\n    throw new TypeError ('Invalid target argument');\n  for (var i = 1, m = arguments.length, a, v; i < m; ++i) {\n    a = arguments[i];\n    if (typeof a !== 'object')\n      throw new TypeError ('Invalid source argument #' + i);\n    for (var k in a) {\n      v = a[k];\n      switch (Object.prototype.toString.call (v)) {\n        case '[object Object]':\n          t[k] = extend (t[k], v);\n          break;\n        case '[object Array]':\n          t[k] = v.slice ();\n          break;\n        default:\n          t[k] = v;\n      }\n    }\n  }\n  return t;\n};\n\n/**\n * A simplified string formatting function.\n * Inserts arguments into % placeholders on the given string.\n * @param {string} str The string to be formatted.\n * @returns {string}\n */\nexports.sprintf = function (str)\n{\n  var c = 0\n    , args = [].slice.call (arguments, 1);\n  return str.replace (/%/g, function ()\n  {\n    return args[c++];\n  });\n};\n\n/**\n * Outputs to the console a string representation of each argument.\n * For objects, the output includes properties inherited from the prototype chain.\n *\n * Variable arguments: {...Object} Source objects.\n */\nexports.debug = function ()\n{\n  Array.prototype.forEach.call (arguments, function (arg)\n  {\n    console.log (debug (arg, 0));\n  });\n\n  function debug (arg, depth)\n  {\n    var s = exports.strRepeat ('  ', depth);\n    if (typeof arg === 'object') {\n      var o = [];\n      if (arg instanceof Array) {\n        if (!arg.length)\n          o.push ('[]');\n        else {\n          o.push ('[', NL);\n          for (var i = 0; i < arg.length; ++i)\n            o.push (s, '  ', i, ': ', debug (arg[i], depth + 1), NL);\n          o.push (s, ']');\n        }\n      }\n      else {\n        o.push ('{');\n        var f = false;\n        for (var k in arg) {\n          f = true;\n          o.push (NL, s, '  ', k, ': ', debug (arg[k], depth + 1));\n        }\n        if (f) o.push (NL, s);\n        o.push ('}');\n      }\n      return o.join ('');\n    }\n    else return nodeUtil.inspect (arg, { showHidden: true, depth: 8, colors: true });\n  }\n};\n\n/**\n * Returns an error location description suitable for output.\n * @param {string} path\n * @returns {string}\n */\nexports.reportErrorLocation = function (path)\n{\n  return csprintf ('yellow', '  File: <cyan>%</cyan>' + NL, path);\n};\n\n/**\n * Stops execution with an error message.\n * Arguments are the same as the ones on <code>sprintf</code> but supports color tags like <code>csprintf</code> does.\n * Default color is red.\n */\nexports.fatal = function ()\n{\n  grunt.fail.fatal (icsprintf ('red', arguments));\n};\n\n/**\n * Displays an error message and, if --force is not enabled, stops execution.\n * Arguments are the same as the ones on <code>sprintf</code> but supports color tags like <code>csprintf</code> does.\n * Default color is yellow.\n */\nexports.warn = function ()\n{\n  grunt.fail.warn (icsprintf ('yellow', arguments));\n};\n\n/**\n * Displays a message.\n * Arguments are the same as the ones on <code>sprintf</code> but supports color tags like <code>csprintf</code> does.\n * Default color is white.\n */\nexports.writeln = function ()\n{\n  grunt.log.writeln (icsprintf ('white', arguments));\n};\n\n/**\n * Displays the given message colored grey, but only if running in verbose mode.\n * Arguments are the same as the ones on <code>sprintf</code> but supports color tags like <code>csprintf</code> does.\n * Default color is white.\n */\nexports.info = function ()\n{\n  if (verbose)\n    grunt.log.writeln (icsprintf ('white', arguments));\n};\n\n/**\n * Output additional error information for verbose mode.\n * Returns the given message colored grey if running in verbose mode otherwise, returns a generic short message.\n * @param {string} msg\n * @returns {string}\n */\nexports.getExplanation = function (msg)\n{\n  return (verbose ? exports.indent (csprintf ('grey', msg)) : '  Use -v for more info.'.grey) + NL;\n};\n\n/**\n * Sorts an array of file paths so that, for each folder, files in subfolders come BEFORE all of the folder's own files.\n * @param {string[]} filePaths sorted by Grunt's native algoritm,\n * @return {string[]} re-sorted filePaths\n */\nexports.sortFilesAfterSubfolders = function (filePaths)\n{\n  var out = []\n    , tree = createFileTree (filePaths);\n\n  // Iterate folders.\n\n  (function iterate (folderNode)\n  {\n    for (var folder in folderNode.subfolders)\n      if (folderNode.subfolders.hasOwnProperty (folder))\n        iterate (folderNode.subfolders[folder]);\n\n    folderNode.files.forEach (function (file)\n    {\n      out.push (file);\n    });\n  }) (tree);\n\n  return out;\n\n};\n\n/**\n * Sorts an array of file paths so that, for each folder, files in subfolders come AFTER all of the folder's own files.\n * @param {string[]} filePaths sorted by Grunt's native algoritm,\n * @return {string[]} re-sorted filePaths\n */\nexports.sortFilesBeforeSubfolders = function (filePaths)\n{\n  var out = []\n    , tree = createFileTree (filePaths);\n\n  (function iterate (folderNode)\n  {\n    folderNode.files.forEach (function (file)\n    {\n      out.push (file);\n    });\n\n    for (var folder in folderNode.subfolders)\n      if (folderNode.subfolders.hasOwnProperty (folder))\n        iterate (folderNode.subfolders[folder]);\n  }) (tree);\n\n  return out;\n};\n\n/**\n * Writes or appends content to a file.\n * When appending it adds a newline between the concatenated content.\n * @param {string} path\n * @param {string} content\n * @param {boolean?} overwrite=false Overwrite an existing file contents instead of appending to them.\n */\nexports.writeFile = function (path, content, overwrite)\n{\n  if (grunt.file.exists (path)) {\n    if (overwrite) {\n      // Re-create file.\n      grunt.file.delete (path);\n      grunt.file.write (path, content);\n    }\n    else {\n      // Append to existing file.\n      var data = grunt.file.read (path);\n      grunt.file.write (path, data + NL + content);\n    }\n  }\n  // Create file.\n  else grunt.file.write (path, content);\n};\n\n/**\n * Generates a regular expression for matching the specified source code syntax.\n * Use spaces to match optional white space on the source code.\n * Backticks are used instead of \\ to allow for cleaner syntax on regexp strings. Ex: write '`n' instead of '\\\\n'.\n * @param {string} syntax\n * @return {string}\n */\nexports.tokenize = function (syntax)\n{\n  return syntax.replace (/`/g, '\\\\').replace (/ /g, '\\\\s*');\n};\n\n/**\n * Returns an array of properties on the given object and their corresponding values.\n * @param {Object} obj The object to be introspected.\n * @param {function(string,*)} callback A function that will receive each property and its corresponding\n * value from the object.\n */\nexports.forEachProperty = function (obj, callback)\n{\n  var p = [];\n  for (var prop in obj)\n    if (obj.hasOwnProperty (prop))\n      callback (prop, obj[prop]);\n  return p;\n};\n\n/**\n * Returns a comma-separated list of quoted strings from an array.\n * @param {Array.<string>} array\n * @returns {string}\n */\nexports.toQuotedList = function (array)\n{\n  return array.length ? \"['\" + array.join (\"', '\") + \"']\" : \"[]\";\n};\n\n/**\n * Indents each line in the given text.\n * @param {string} text The text to be indented.\n * @param {number} [level=1] Indentation depth level.\n * @param {string} [indentStr=\"&nbsp;&nbsp;\"] A white space string that represents each indentation level\n * (ex. spaces or tabs).\n * @return {string}\n */\nexports.indent = function (text, level, indentStr)\n{\n  return text.split (/\\r?\\n/).map (function (line)\n  {\n    return line.trim () && (exports.strRepeat (indentStr || '  ', level || 1) + line);\n  }).join (NL);\n};\n\n/**\n * Repeats a string as many times as specified.\n * @param {string} str The string to be repeated.\n * @param {number} num How many times to repeat.\n * @returns {string}\n */\nexports.strRepeat = function (str, num)\n{\n  return num ? new Array (num + 1).join (str) : '';\n};\n\n/**\n * Appends the second array into the first one, in-place.\n * @param {Array} target\n * @param {Array?} src If null, not specified or an empty array, target will not be modified.\n * @returns {Number} The cardinality of target after the operation.\n */\nexports.arrayAppend = function (target, src)\n{\n  return Array.prototype.push.apply (target, src);\n};\n\n/**\n * Escape Regular Expression.\n *\n * Turn a string into a valid Regular Expression\n * by escaping special chars\n *\n * @param {string} str The string to escape.\n */\nexports.escapeRegExp = function (str)\n{\n  return str.replace(/[.^$*+?()[{\\\\|\\]-]/g, '\\\\$&');\n};\n\n//------------------------------------------------------------------------------\n// PRIVATE\n//------------------------------------------------------------------------------\n\n/**\n * Colorized sprintf.\n * Formats a string with color and injects values into placeholders.\n * Placeholders are represented by the symbol %.\n * To colorize, use markup with the syntax: <code>&lt;color_name>text&lt;/color_name></code>\n * Warning: do not nest color tags!\n *\n * Variable arguments: {...string|...number} - values for each placeholder in <code>str</code>.\n *\n * @param {string} baseColor The base color for the string. Segments with other colors will resume the base color where\n * they end.\n * @param {string} str The string to be formatted.\n * @returns {string}\n */\nfunction csprintf (baseColor, str)\n{\n  /*jshint unused:false */\n  str = exports.sprintf.apply (null, [].slice.call (arguments, 1));\n  str = str.replace (/<(\\w+)>([\\s\\S]*?)<\\/\\1>/g, function (m, m1, m2)\n  {\n    if (m1 === 'bold' || m1 === 'underline')\n      m2 = m2[baseColor];\n    return '±' + m2[m1] + '§';\n  });\n  str = str.replace (/^([\\s\\S]*?)±|§([\\s\\S]*?)±|§([\\s\\S]*?)$/g, function (m, m1, m2, m3)\n  {\n    var s = m1 || (m2 || '') || (m3 || '');\n    return s ? s[baseColor] : s;\n  });\n  return str[baseColor];\n}\n\n/**\n * Similar to <code>csprintf</code> but supports an <code>args</code> argument that should receive a function's\n * <code>arguments</code> array-like object.\n * @private\n *\n * @param {string} baseColor Color name.\n * @param {Object} args Should be a function's <code>arguments</code> array-like object.\n * @returns {string}\n */\nfunction icsprintf (baseColor, args)\n{\n  return exports.csprintf.apply (null, [baseColor].concat ([].slice.call (args)));\n}\n\n/**\n * Generates a tree of folder names and file names from a (possibliy) unsorted linear list of file paths.\n * @param {string[]} filePaths\n * @returns {{files: string[], subfolders: {}}}\n */\nfunction createFileTree (filePaths)\n{\n  var path = require ('path')\n    , root = {\n        files:      [],\n        subfolders: {}\n      };\n\n  filePaths.forEach (function (filename)\n  {\n    var dir = path.dirname (filename)\n      , folderPtr = root;\n    if (dir)\n      dir.split (path.sep).forEach (function (segment)\n      {\n        if (!folderPtr.subfolders[segment])\n          folderPtr.subfolders[segment] = {\n            files:      [],\n            subfolders: {}\n          };\n        folderPtr = folderPtr.subfolders[segment];\n      });\n    folderPtr.files.push (filename);\n  });\n  return root;\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/lib/types.js":"/**\n * Angular Builder's data types.\n *\n * @module lib/types\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\n/* jshint unused: vars */\n\nvar util = require ('./gruntUtil')\n  , extend = util.extend;\n\n//======================================================================================================================\n\n/**\n * Angular Builder's task options.\n *\n * Note: Middleware classes augment this class with their own options.\n *\n * @constructor\n * @mixes BuildAssetsOptionsMixin\n * @mixes MakeDebugBuildOptionsMixin\n * @mixes OverrideDependenciesOptionsMixin\n * @mixes MakeReleaseBuildOptionsMixin\n * @mixes ExportSourcePathsOptionsMixin\n * @mixes ExportRequiredStylesheetsOptionsMixin\n * @mixes ExportRequiredTemplatesOptionsMixin\n */\nfunction TaskOptions ()\n{}\n\nTaskOptions.prototype = {\n  /**\n   * Main module name. Only this module and its dependencies will be exported.\n   * @type {string}\n   */\n  mainModule:         '',\n  /**\n   * A list of module names to ignore when building.\n   * This allows the source code to contain references to modules not present in the build (ex. 3rd party libraries that\n   * are loaded independently).\n   *\n   * If a module reference (for module access or for declaring a dependency) is found in the source code, which targets\n   * a module that is not declared anywhere in the build's source files, the build operation aborts when that module\n   * name is not present on this list.\n   * @type {string|string[]}\n   */\n  externalModules:    '',\n  /**\n   * A list of framework built-in modules (ex. 'ng') that will always be appended to the `externalModules` list when\n   * running tasks, so that references to them are ignored by the builder.\n   * This is reserved for internal use, but could be overridden if you wish to completely replace the built-in behavior.\n   * @type {string[]}\n   */\n  builtinModules:     ['ng'],\n  /**\n   * A list of modules to be excluded from the build.\n   *\n   * Unlike <code>externalModules</code>, which excludes each module and all of its dependencies, this option only\n   * excludes the specified module from the output, not its dependencies.\n   * One typical use for this is to exclude the main module from one or more build tasks.\n   * @type {string[]}\n   */\n  excludedModules:    [],\n  /**\n   * A list of file paths to prepend to the build output.\n   * This forces the inclusion of specific script files, independently of any source file scanning performed\n   * by Grunt.\n   * @type {string[]}\n   */\n  require:            [],\n  /**\n   * Allows loading third-party middleware into the middleware stack.\n   * This is a task-level option. Do not specify it at target-level.\n   *\n   * This option allows the definition of a list of external middleware modules to load and for each one, to specify\n   * where to place it on the middleware stack.\n   * Each element in the list defines a module name (with the `load` property) and one of the following properties:\n   * `before`, `after` or `over`. The property name selects the insertion position on the middleware stack for the\n   * loaded one.\n   * Note: internal middlewares are loaded into the middleware stack before the external middlewares.\n   * @type {Array.<{load: string, before: ?string, after: ?string}>|null}\n   */\n  externalMiddleware: null,\n  /**\n   * Defines the list of middleware bundled with angular-builder.\n   * This is a task-level option. Do not specify it at target-level.\n   *\n   * This option sets a list of modules names to load and assemble into a middleware stack in the specified order.\n   * This is reserved for internal use, but could be overridden if you wish to replace some or all of the\n   * built-in behavior. Usually, though, you should use the `externalMiddleware` option.\n   * WARNING: the order of middleware listed here is important! If you change it, the build process may fail!\n   * @type {string[]}\n   * @const\n   */\n  internalMiddleware: [\n    './middleware/overrideDependencies',\n    './middleware/analyzeSourceCode',\n    './middleware/exportSourcePaths',\n    './middleware/includeRequiredScripts',\n    './middleware/buildForeignScripts',\n    './middleware/makeDebugBuild',\n    './middleware/makeReleaseBuild',\n    './middleware/exportRequiredStylesheets',\n    './middleware/exportRequiredTemplates',\n    './middleware/buildAssets'\n  ]\n};\n\n//======================================================================================================================\n\n/**\n * A Grunt files array with extended options.\n * @interface\n */\nfunction GruntFilesArrayExt ()\n{}\n\nGruntFilesArrayExt.prototype = {\n  /**\n   * @type {string[]|null}\n   */\n  src:          null,\n  /**\n   * @type {string|null}\n   */\n  dest:         null,\n  /**\n   * A list of filenames or glob patterns that specify which javascript files should always be included in the build,\n   * even if they have no module declarations.\n   *\n   * <b>Warning:</b> the files must also be matched by <code>src</code> to be included.\n   *\n   * <b>Note:</b> patterns without slashes will match against the basename of the path even if it contains slashes,\n   * eg. pattern <code>*.js</code> will match filepath <code>path/to/file.js</code>.\n   *\n   * Usually, when a script file is found in the set of source files which doesn't contain a module declaration,\n   * that file is ignored.\n   * But, if the file name and path matches a file name or glob pattern specified here, it will still be included.\n   *\n   * Non-module files are output in the same order they were read, and <b>before</b> any module.\n   *\n   * <b>Tip:</b> You can append the current step's result script to another one that resulted from a previous build\n   * step.\n   * If you specify a target or file group exclusively for standalone script files and append the result to other built\n   * files, you will have more control on the order of the assembled files.\n   *\n   *  @type {string|string[]|null}\n   */\n  forceInclude: null\n\n};\n\n//======================================================================================================================\n\n/**\n * API for an Angular Builder middleware plugin.\n * Defines handlers for the three stages of the build process: analyze --> trace --> build.\n *\n * Note: implementing classes must have a compatible constructor.\n *\n * @interface\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction MiddlewareInterface (context)\n{}\n\nMiddlewareInterface.prototype = {\n  /**\n   * Load and analyze the specified source files.\n   * Invoked once.\n   *\n   * @param {GruntFilesArrayExt} filesArray The set of source code files to be processed.\n   */\n  analyze: function (filesArray) {},\n  /**\n   * Scan a module for relevant information.\n   * Invoked once for each required module in the application, in the order defined by the dependency graph.\n   * Each module, in turn, is passed trough all the middlewares on the stack.\n   *\n   * Note: external and excluded modules are never traced; dependencies of excluded modules may be traced.\n   *\n   * @param {ModuleDef} module Gives you access to the module's metadata and its source code.\n   */\n  trace:   function (module) {},\n  /**\n   * Build the compilation output.\n   * Invoked once.\n   *\n   * @param {string} targetScript Path to the output script.\n   */\n  build:   function (targetScript) {}\n};\n\n//======================================================================================================================\n\n/**\n * Context event names.\n * @enum {string}\n * @const\n */\nvar ContextEvent = {\n  ON_INIT:          'init',\n  ON_AFTER_ANALYZE: 'after-analyze',\n  ON_AFTER_TRACE:   'after-trace',\n  ON_AFTER_BUILD:   'after-build'\n};\n\n/**\n * The execution context for the middleware stack.\n * Contains shared information available throughout the middleware stack.\n * @constructor\n * @param grunt The Grunt API.\n * @param task The currently executing Grunt task.\n * @param {TaskOptions} defaultOptions The default values for all of the Angular Builder's options, including all\n * middleware options.\n */\nfunction Context (grunt, task, defaultOptions)\n{\n  this.grunt = grunt;\n  this.options = extend ({}, defaultOptions, task.options ());\n  if (task.flags.debug !== undefined || grunt.option ('build') === 'debug') {\n    this.options.debugBuild.enabled = true;\n    this.options.releaseBuild.enabled = false;\n  }\n  this.verbose = grunt.option ('verbose');\n  // Clone the external modules and use it as a starting point.\n  this.modules = extend ({}, this._setupExternalModules ());\n  // Reset tracer.\n  this.loaded = {};\n  // Reset the scripts list to a clone of the `require` option or to an empty list.\n  this.standaloneScripts = (this.options.require || []).slice ();\n  this.shared = {};\n  this._events = {};\n}\n\nContext.prototype = {\n  /**\n   * The Grunt API.\n   */\n  grunt:                 null,\n  /**\n   * Task-specific options set on the Gruntfile.\n   * @type {TaskOptions}\n   */\n  options:               null,\n  /**\n   * <code>true</code> if the task is running in verbose mode.\n   * @type {boolean}\n   */\n  verbose:               false,\n  /**\n   * A map of module names to module definition records.\n   * @type {Object.<string, ModuleDef>}\n   */\n  modules:               null,\n  /**\n   * A map of module names to boolean values that registers which modules were already\n   * emmited to/ referenced on the output.\n   * @type {Object.<string,boolean>}\n   */\n  loaded:                null,\n  /**\n   * A list of scripts that have no module definitions but still are forced to being included in the build.\n   * Each item contains the filename and the file content.\n   * @type {Array.<{path: string, content: string}>}\n   */\n  standaloneScripts:     null,\n  /**\n   * Source code to be prepended to the output build file.\n   * @type {string}\n   */\n  prependOutput:         '',\n  /**\n   * Source code to be appended to the output build file.\n   * @type {string}\n   */\n  appendOutput:          '',\n  /**\n   * Custom data shared between extensions.\n   */\n  shared:                null,\n  /**\n   * A map of registered event handlers.\n   * @type {Object.<ContextEvent,Function[]>}\n   * @private\n   */\n  _events:               null,\n  /**\n   * Registers an event handler.\n   * @param {ContextEvent} eventName\n   * @param {function()} handler\n   */\n  listen:                function (eventName, handler)\n  {\n    if (!this._events[eventName])\n      this._events[eventName] = [];\n    this._events[eventName].push (handler);\n  },\n  /**\n   * Calls all registered event handlers for the specified event.\n   * @param {ContextEvent} eventName\n   */\n  trigger:               function (eventName)\n  {\n    var e = this._events[eventName];\n    if (e)\n      e.forEach (function (handler)\n      {\n        handler ();\n      });\n  },\n  /**\n   * Registers the configured external modules so that they can be ignored during the build output generation.\n   * @returns {Object.<string, ModuleDef>}\n   * @private\n   */\n  _setupExternalModules: function ()\n  {\n    /** @type {Object.<string, ModuleDef>} */\n    var modules = {};\n    ((typeof this.options.externalModules === 'string' ?\n      [this.options.externalModules] : this.options.externalModules\n      ) || []).\n      concat (this.options.builtinModules).\n      forEach (function (moduleName)\n    {\n      // Ignore redundant names.\n      if (!modules[moduleName]) {\n        /** @type {ModuleDef} */\n        var module = modules[moduleName] = new ModuleDef (moduleName);\n        module.external = true;\n      }\n    });\n    return modules;\n  }\n\n};\n\n//======================================================================================================================\n\n/**\n * A module definition record.\n * Contains all javascript defining the module, read from one or more source files.\n * @constructor\n * @param {string} name\n */\nfunction ModuleDef (name)\n{\n  this.name = name;\n  this.bodies = [];\n  this.filePaths = [];\n}\n\nModuleDef.prototype = {\n  /**\n   * The module's name.\n   * @type {!string}\n   */\n  name:      '',\n  /**\n   * Relative file paths to the source script files.\n   * The first entry corresponds to the file that starts the module definition.\n   * Note: empty string elements will be ignored.\n   * Note: at least one element must be present, even if empty.\n   * @type {string[]}\n   */\n  filePaths: null,\n  /**\n   * The content of the file that starts the module definition.\n   * If null, the file was not yet read.\n   * @type {?string}\n   */\n  head:      null,\n  /**\n   * The content of each additional file that appends definitions to the module.\n   * If there are no additional files for the module, the value will be an empty array.\n   * @type {string[]}\n   */\n  bodies:    null,\n  /**\n   * List with the names of the required modules.\n   * If no modules are required, the value will be an empty array.\n   * @type {string[]}\n   */\n  requires:  null,\n  /**\n   * When true, the module is not included in the build but it's possibly referenced in the source code.\n   * @type {boolean}\n   */\n  external:  false,\n  /**\n   * Third parameter of a module declaration, if present.\n   * @type {string|undefined}\n   */\n  configFn:  undefined\n};\n\n//======================================================================================================================\n\n/**\n * A function result composite value that includes a status value and optional data.\n * @name OperationResult\n *//**\n * Result status code. 0 = OK, other values depend on the context this is being used on.\n * @name OperationResult#status\n * @type {number}\n */\n/**\n * Optional output data from the function that returned this record.\n * @name OperationResult#data\n * @type {*}\n */\n\n//======================================================================================================================\n// EXPORT\n//======================================================================================================================\n\nmodule.exports = {\n  ModuleDef:          ModuleDef,\n  ExtensionInterface: MiddlewareInterface,\n  ContextEvent:       ContextEvent,\n  Context:            Context,\n  TaskOptions:        TaskOptions\n};\n"}