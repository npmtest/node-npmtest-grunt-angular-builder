{"/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/test.js":"/* istanbul instrument in package npmtest_grunt_angular_builder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/lib.npmtest_grunt_angular_builder.js":"/* istanbul instrument in package npmtest_grunt_angular_builder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_angular_builder = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_angular_builder = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-angular-builder && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_angular_builder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_angular_builder\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_angular_builder.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_angular_builder.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_angular_builder.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_angular_builder.__dirname + '/lib.npmtest_grunt_angular_builder.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/Gruntfile.js":"/*\n * grunt-angular-builder\n * https://github.com/claudio-silva/grunt-angular-builder\n *\n * Copyright (c) 2013 Cláudio Silva\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function (grunt)\n{\n  require ('time-grunt') (grunt);\n\n  // Project configuration.\n  grunt.initConfig ({\n\n    jshint: {\n      all:     [\n        'Gruntfile.js',\n        'tasks/**/*.js'\n      ],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean:  {\n      tests: ['tmp', 'dist']\n    },\n\n    'angular-builder': {\n      'test-js-app':              {\n        options: {\n          mainModule:      'App',\n          externalModules: 'Library1'\n        },\n        src:     'tests/js-only/**/*.js',\n        dest:    'dist/main.js'\n      },\n      'test-js-lib':              {\n        options: {\n          mainModule:   'Library1',\n          releaseBuild: {\n            renameModuleRefs: true\n          }\n        },\n        src:     'tests/js-only/**/*.js',\n        dest:    'dist/library1.js'\n      },\n      'test-js-fail':             {\n        /** Warning: The module variable reference declare doesn't match the preset name\n         on the config setting moduleVar='module'. File: tests/js-only/extra/Submodule4.js */\n        options: {\n          mainModule: 'Library2'\n        },\n        src:     'tests/js-only/**/*.js',\n        dest:    'dist/library2.js'\n      },\n      'test-js-comments':         {\n        options: {\n          mainModule: 'Library3'\n        },\n        src:     'tests/js-only/**/*.js',\n        dest:    'dist/library3.js'\n      },\n      'test-stylesheets':         {\n        options: {\n          mainModule: 'Submodule1'\n        },\n        src:     [\n          'tests/stylesheets/submodule1/**/*.js',\n          'tests/stylesheets/submodule2/**/*.js'\n        ],\n        dest:    'dist/main.js'\n      },\n      'test-assets':              {\n        options: {\n          mainModule: 'App',\n          assets:     {\n            enabled:   true,\n            targetDir: 'styles',\n            symlink:   true\n          }\n        },\n        src:     'tests/stylesheets/**/*.js',\n        dest:    'dist/main.js'\n      },\n      'test-3rd-party':           {\n        options:      {\n          mainModule: 'App'\n        },\n        src:          'tests/3rd-party/**/*.js',\n        dest:         'dist/main.js',\n        forceInclude: 'tests/3rd-party/angular-loader.js'\n      },\n      'test-include-non-angular': {\n        options:      {\n          mainModule: 'App'\n        },\n        src:          'tests/include-non-angular/**/*.js',\n        dest:         'dist/main.js',\n        forceInclude: 'tests/include-non-angular/other/other.js'\n      },\n      'test-include-and-rebase':  {\n        options:      {\n          mainModule:   'App',\n          debugBuild:   {\n            rebaseDebugUrls: [\n              { match: /other\\//, replaceWith: '' }, //remove path segment\n              { match: /tests\\/include-non-angular/, replaceWith: 'js' }, //replace base path\n              { match: /^.*demo.js$/, replaceWith: '' } //suppress library\n            ]\n          }\n        },\n        src:          'tests/include-non-angular/**/*.js',\n        dest:         'dist/main.js',\n        forceInclude: 'tests/include-non-angular/other/other.js'\n      },\n      'test-override-deps':       {\n        options: {\n          mainModule:           'App',\n          overrideDependencies: {\n            dependencies: ['Submodule1', 'Library1']\n          }\n        },\n        src:     ['tests/js-only/**/*.js', '!tests/js-only/App.js'],\n        dest:    'dist/main.js'\n      },\n      'test-slashes':       {\n        options: {\n          mainModule:           'App'\n        },\n        src:     ['tests/slashes/**/*.js'],\n        dest:    'dist/main.js'\n      }\n    },\n\n    concat: {\n      'test-stylesheets': {\n        src:  '<%= requiredStylesheets %>',\n        dest: 'dist/styles.css'\n      },\n      'test-assets':      {\n        src:  '<%= requiredStylesheets %>',\n        dest: 'dist/styles/styles.css'\n      },\n      '3rd-party':        {\n        src:  'tests/3rd-party/index.html',\n        dest: 'dist/index.html'\n      }\n    },\n\n    jsdoc: {\n      dist: {\n        // Force usage of JSDoc 3.3.0\n        jsdoc:   \"./node_modules/.bin/jsdoc\",\n        src:     ['tasks/**/*.js'],\n        options: {\n          destination: 'doc',\n          configure:   'jsdoc.json'\n        }\n      }\n    }\n\n  });\n\n  // Load this plugin's task(s).\n  grunt.loadTasks ('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks ('grunt-contrib-jshint');\n  grunt.loadNpmTasks ('grunt-contrib-clean');\n  grunt.loadNpmTasks ('grunt-contrib-concat');\n  grunt.loadNpmTasks ('grunt-jsdoc');\n\n  // By default, lint and run all tests.\n  grunt.registerTask ('default', ['jshint']);\n\n  grunt.registerTask ('doc', ['jsdoc']);\n\n  // Test tasks below can also be executed with the command line option `--build debug` to generate debug builds.\n\n  grunt.registerTask ('test', [\n    'test-js-app',\n    'test-js-lib',\n    //'test-js-fail',\n    'test-js-comments',\n    'test-stylesheets',\n    'test-assets',\n    'test-3rd-party',\n    'test-include-non-angular',\n    'test-override-deps'\n  ]);\n\n  grunt.registerTask ('test-js-app', ['clean', 'angular-builder:test-js-app']);\n  grunt.registerTask ('test-js-lib', ['clean', 'angular-builder:test-js-lib']);\n  grunt.registerTask ('test-js-fail', ['clean', 'angular-builder:test-js-fail']);\n  grunt.registerTask ('test-js-comments', ['clean', 'angular-builder:test-js-comments']);\n  grunt.registerTask ('test-stylesheets', ['clean', 'angular-builder:test-stylesheets', 'concat:test-stylesheets']);\n  grunt.registerTask ('test-assets', ['clean', 'angular-builder:test-assets', 'concat:test-assets']);\n  grunt.registerTask ('test-3rd-party', ['clean', 'angular-builder:test-3rd-party', 'concat:3rd-party']);\n  grunt.registerTask ('test-include-non-angular', ['clean', 'angular-builder:test-include-non-angular']);\n  grunt.registerTask ('test-include-and-rebase', ['clean', 'angular-builder:test-include-and-rebase::debug']);\n  grunt.registerTask ('test-override-deps', ['clean', 'angular-builder:test-override-deps']);\n  grunt.registerTask ('test-slashes', ['clean', 'angular-builder:test-slashes::debug']);\n\n};","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/angular-builder.js":"/**\n * @license\n * AngularJS Builder.\n * Copyright 2013 Cláudio Manuel Brás da Silva.\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar TASK_NAME = 'angular-builder';\n\nvar TASK_DESCRIPTION = 'Generates a release/debug build of an AngularJS project.';\n\n/**\n * Utility functions.\n */\nvar util = require ('./lib/gruntUtil')\n  , types = require ('./lib/types');\n\nvar Context = types.Context\n  , ContextEvent = types.ContextEvent\n  , TaskOptions = types.TaskOptions\n  , extend = util.extend\n  , fatal = util.fatal\n  , info = util.info;\n/**\n * Exports a function that will be called by Grunt to register tasks for this plugin.\n * @param grunt The Grunt API.\n */\nmodule.exports = function (grunt)\n{\n  util.init (grunt);\n\n//------------------------------------------------------------------------------\n// GRUNT TASK\n//------------------------------------------------------------------------------\n\n  grunt.registerMultiTask (TASK_NAME, TASK_DESCRIPTION, function ()\n  {\n    //------------------\n    // SETUP\n    //------------------\n\n    if (!this.files.length)\n      fatal ('No source files were defined.');\n\n    /**\n     * The default values for all of the Angular Builder's options.\n     * @type {TaskOptions}\n     */\n    var defaultOptions = new TaskOptions ();\n\n    /**\n     * An ordered list of middleware classes from which the middleware stack will be created later on.\n     *\n     * Note: when loading the middleware modules, the TaskOptions class becomes augmented with middleware-specific\n     * options.\n     * @type {MiddlewareInterface[]}\n     */\n    var middlewareStackClasses = loadMiddlewareModules (defaultOptions);\n\n    //-------------------------\n    // Process each file group\n    //-------------------------\n\n    this.files.forEach (function (/** GruntFilesArrayExt */ fileGroup)\n    {\n      // Note: source code analysis information for each file group is reset for each file group,\n      // i.e. each group is an independent build.\n\n      var context = new Context (grunt, this, defaultOptions);\n\n      if (!context.options.mainModule)\n        fatal ('No main module is defined.');\n\n      /**\n       * The sequential list of loaded middleare.\n       * These will be reset for each file group.\n       * @type {MiddlewareInterface[]}\n       */\n      var middlewareStack = assembleMiddleware (middlewareStackClasses, context);\n\n      context.trigger (ContextEvent.ON_INIT);\n\n      //------------------\n      // LOAD SOURCE CODE\n      //------------------\n\n      if (!fileGroup.dest)\n        fatal ('No target script is defined.');\n\n      // Pass all the source code trough the 1st stage of the middleware stack.\n\n      middlewareStack.forEach (function (/*MiddlewareInterface*/ middleware)\n      {\n        middleware.analyze (fileGroup);\n      });\n\n      context.trigger (ContextEvent.ON_AFTER_ANALYZE);\n\n      //------------------\n      // BUILD\n      //------------------\n\n      // Trace the dependency graph and pass each module trough the 2nd stage of the middleware stack.\n\n      traceModule (context.options.mainModule, context, function (/*ModuleDef*/module)\n      {\n        middlewareStack.forEach (function (/*MiddlewareInterface*/ middleare)\n        {\n          middleare.trace (module);\n        });\n      });\n\n      context.trigger (ContextEvent.ON_AFTER_TRACE);\n\n      // Pass all the analysed source code trough the 3rd stage of the middleware stack.\n\n      middlewareStack.forEach (function (/*MiddlewareInterface*/ middleware)\n      {\n        middleware.build (fileGroup.dest);\n      });\n\n      context.trigger (ContextEvent.ON_AFTER_BUILD);\n\n    }.bind (this));\n  });\n\n  /**\n   * Loads all middlewares (both internal and external).\n   *\n   * @param {TaskOptions} options The task's base default options. Extended options contributed by middleware will be\n   * set in turn by each loaded middleware module.\n   * @return {Array}\n   */\n  function loadMiddlewareModules (options)\n  {\n    var middlewareStackClasses = [];\n\n    options.internalMiddleware.forEach (function (moduleName)\n    {\n      var module = require (moduleName);\n      if (!module.middleware)\n        util.fatal ('No middleware found on module %.', moduleName);\n      if (module.options)\n        extend (options, module.options);\n      middlewareStackClasses.push (module.middleware);\n    });\n\n    if (options.externalMiddleware)\n      options.externalMiddleware.forEach (function (info)\n      {\n        var module = require (info.load);\n        if (module.options)\n          extend (options, new module.options ());\n        var target = info.before || info.after\n          , i = middlewareStackClasses.indexOf (target);\n        if (~i)\n          util.fatal (\"Can't locate the % middleware module for inserting %.\", target, info.load);\n        middlewareStackClasses.splice (i + (info.before ? 0 : 1), 0, module.middleware);\n      });\n\n    return middlewareStackClasses;\n  }\n\n  /**\n   * Creates a new instance of each loaded middleware and assembles them into a sequential list.\n   * @param {MiddlewareInterface[]} middlewareStackClasses An ordered list of classes to be instantiated.\n   * @param {Context} context The build execution context.\n   * @returns {MiddlewareInterface[]}\n   */\n  function assembleMiddleware (middlewareStackClasses, context)\n  {\n    var middlewares = [];\n    middlewareStackClasses.forEach (function (MiddlewareClass)\n    {\n      middlewares.push (new MiddlewareClass (context));\n    });\n    return middlewares;\n  }\n\n  /**\n   * Traces a dependency graph for the specified module and calls the given callback\n   * to process each required module in the correct loading order.\n   * @param {string} moduleName\n   * @param {Context} context The execution context for the middleware stack.\n   * @param {function(ModuleDef)} processHook\n   */\n  function traceModule (moduleName, context, processHook)\n  {\n    var module = context.modules[moduleName];\n    if (!module)\n      fatal ('Module <cyan>%</cyan> was not found.', moduleName);\n    // Ignore the module if it's external.\n    if (module.external)\n      return;\n    // Include required submodules first.\n    if (module.requires) {\n      module.requires.forEach (function (modName)\n      {\n        traceModule (modName, context, processHook);\n      });\n    }\n    // Ignore references to already loaded modules or to explicitly excluded modules.\n    if (!context.loaded[module.name] && !~context.options.excludedModules.indexOf (module.name)) {\n      info ('Including module <cyan>%</cyan>.', moduleName);\n      context.loaded[module.name] = true;\n      processHook (module);\n    }\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/lib/gruntUtil.js":"/**\n * A set of utility functions for use with Grunt.\n *\n * @module lib/gruntUtil\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\n/**\n * Test\n * @type {exports}\n */\nvar nodeUtil = require ('util');\n\n/*\n * Get color and style in your node.js console.\n * Note: requiring this here modifies the String prototype!\n */\nrequire ('colors');\n\n/**\n * OS dependent line terminator.\n * @type {string}\n */\nvar NL = process.platform === 'win32' ? '\\r\\n' : '\\n';\n\n/**\n * The Grunt instance.\n */\nvar grunt;\n/**\n * <code>true</code> if the task is running in verbose mode.\n * @type {boolean}\n */\nvar verbose;\n\n//------------------------------------------------------------------------------\n// PUBLIC\n//------------------------------------------------------------------------------\n\nexports.csprintf = csprintf;\nexports.icsprintf = icsprintf;\nexports.NL = NL;\n\n/**\n * Initializes the gruntUtil module.\n * You MUST call this function before using most other functions in this module.\n * @param gruntInstance\n */\nexports.init = function (gruntInstance)\n{\n  grunt = gruntInstance;\n  verbose = grunt.option ('verbose');\n};\n\n/**\n * Copies properties recursively from each of the source objects to the target object.\n *\n * Variable arguments: {...Object} Source objects.\n *\n * Notes:\n * - Properties inherited from the prototype chain are also copied.\n * - Copied properties of object type are merged with the target.\n * - Copied properties of array type are not merged, they are are cloned (the array items are still the original).\n *\n * @param {Object} t Target.\n */\nexports.extend = function extend (t)\n{\n  if (t === null || t === undefined)\n    t = {};\n  else if (typeof t !== 'object')\n    throw new TypeError ('Invalid target argument');\n  for (var i = 1, m = arguments.length, a, v; i < m; ++i) {\n    a = arguments[i];\n    if (typeof a !== 'object')\n      throw new TypeError ('Invalid source argument #' + i);\n    for (var k in a) {\n      v = a[k];\n      switch (Object.prototype.toString.call (v)) {\n        case '[object Object]':\n          t[k] = extend (t[k], v);\n          break;\n        case '[object Array]':\n          t[k] = v.slice ();\n          break;\n        default:\n          t[k] = v;\n      }\n    }\n  }\n  return t;\n};\n\n/**\n * A simplified string formatting function.\n * Inserts arguments into % placeholders on the given string.\n * @param {string} str The string to be formatted.\n * @returns {string}\n */\nexports.sprintf = function (str)\n{\n  var c = 0\n    , args = [].slice.call (arguments, 1);\n  return str.replace (/%/g, function ()\n  {\n    return args[c++];\n  });\n};\n\n/**\n * Outputs to the console a string representation of each argument.\n * For objects, the output includes properties inherited from the prototype chain.\n *\n * Variable arguments: {...Object} Source objects.\n */\nexports.debug = function ()\n{\n  Array.prototype.forEach.call (arguments, function (arg)\n  {\n    console.log (debug (arg, 0));\n  });\n\n  function debug (arg, depth)\n  {\n    var s = exports.strRepeat ('  ', depth);\n    if (typeof arg === 'object') {\n      var o = [];\n      if (arg instanceof Array) {\n        if (!arg.length)\n          o.push ('[]');\n        else {\n          o.push ('[', NL);\n          for (var i = 0; i < arg.length; ++i)\n            o.push (s, '  ', i, ': ', debug (arg[i], depth + 1), NL);\n          o.push (s, ']');\n        }\n      }\n      else {\n        o.push ('{');\n        var f = false;\n        for (var k in arg) {\n          f = true;\n          o.push (NL, s, '  ', k, ': ', debug (arg[k], depth + 1));\n        }\n        if (f) o.push (NL, s);\n        o.push ('}');\n      }\n      return o.join ('');\n    }\n    else return nodeUtil.inspect (arg, { showHidden: true, depth: 8, colors: true });\n  }\n};\n\n/**\n * Returns an error location description suitable for output.\n * @param {string} path\n * @returns {string}\n */\nexports.reportErrorLocation = function (path)\n{\n  return csprintf ('yellow', '  File: <cyan>%</cyan>' + NL, path);\n};\n\n/**\n * Stops execution with an error message.\n * Arguments are the same as the ones on <code>sprintf</code> but supports color tags like <code>csprintf</code> does.\n * Default color is red.\n */\nexports.fatal = function ()\n{\n  grunt.fail.fatal (icsprintf ('red', arguments));\n};\n\n/**\n * Displays an error message and, if --force is not enabled, stops execution.\n * Arguments are the same as the ones on <code>sprintf</code> but supports color tags like <code>csprintf</code> does.\n * Default color is yellow.\n */\nexports.warn = function ()\n{\n  grunt.fail.warn (icsprintf ('yellow', arguments));\n};\n\n/**\n * Displays a message.\n * Arguments are the same as the ones on <code>sprintf</code> but supports color tags like <code>csprintf</code> does.\n * Default color is white.\n */\nexports.writeln = function ()\n{\n  grunt.log.writeln (icsprintf ('white', arguments));\n};\n\n/**\n * Displays the given message colored grey, but only if running in verbose mode.\n * Arguments are the same as the ones on <code>sprintf</code> but supports color tags like <code>csprintf</code> does.\n * Default color is white.\n */\nexports.info = function ()\n{\n  if (verbose)\n    grunt.log.writeln (icsprintf ('white', arguments));\n};\n\n/**\n * Output additional error information for verbose mode.\n * Returns the given message colored grey if running in verbose mode otherwise, returns a generic short message.\n * @param {string} msg\n * @returns {string}\n */\nexports.getExplanation = function (msg)\n{\n  return (verbose ? exports.indent (csprintf ('grey', msg)) : '  Use -v for more info.'.grey) + NL;\n};\n\n/**\n * Sorts an array of file paths so that, for each folder, files in subfolders come BEFORE all of the folder's own files.\n * @param {string[]} filePaths sorted by Grunt's native algoritm,\n * @return {string[]} re-sorted filePaths\n */\nexports.sortFilesAfterSubfolders = function (filePaths)\n{\n  var out = []\n    , tree = createFileTree (filePaths);\n\n  // Iterate folders.\n\n  (function iterate (folderNode)\n  {\n    for (var folder in folderNode.subfolders)\n      if (folderNode.subfolders.hasOwnProperty (folder))\n        iterate (folderNode.subfolders[folder]);\n\n    folderNode.files.forEach (function (file)\n    {\n      out.push (file);\n    });\n  }) (tree);\n\n  return out;\n\n};\n\n/**\n * Sorts an array of file paths so that, for each folder, files in subfolders come AFTER all of the folder's own files.\n * @param {string[]} filePaths sorted by Grunt's native algoritm,\n * @return {string[]} re-sorted filePaths\n */\nexports.sortFilesBeforeSubfolders = function (filePaths)\n{\n  var out = []\n    , tree = createFileTree (filePaths);\n\n  (function iterate (folderNode)\n  {\n    folderNode.files.forEach (function (file)\n    {\n      out.push (file);\n    });\n\n    for (var folder in folderNode.subfolders)\n      if (folderNode.subfolders.hasOwnProperty (folder))\n        iterate (folderNode.subfolders[folder]);\n  }) (tree);\n\n  return out;\n};\n\n/**\n * Writes or appends content to a file.\n * When appending it adds a newline between the concatenated content.\n * @param {string} path\n * @param {string} content\n * @param {boolean?} overwrite=false Overwrite an existing file contents instead of appending to them.\n */\nexports.writeFile = function (path, content, overwrite)\n{\n  if (grunt.file.exists (path)) {\n    if (overwrite) {\n      // Re-create file.\n      grunt.file.delete (path);\n      grunt.file.write (path, content);\n    }\n    else {\n      // Append to existing file.\n      var data = grunt.file.read (path);\n      grunt.file.write (path, data + NL + content);\n    }\n  }\n  // Create file.\n  else grunt.file.write (path, content);\n};\n\n/**\n * Generates a regular expression for matching the specified source code syntax.\n * Use spaces to match optional white space on the source code.\n * Backticks are used instead of \\ to allow for cleaner syntax on regexp strings. Ex: write '`n' instead of '\\\\n'.\n * @param {string} syntax\n * @return {string}\n */\nexports.tokenize = function (syntax)\n{\n  return syntax.replace (/`/g, '\\\\').replace (/ /g, '\\\\s*');\n};\n\n/**\n * Returns an array of properties on the given object and their corresponding values.\n * @param {Object} obj The object to be introspected.\n * @param {function(string,*)} callback A function that will receive each property and its corresponding\n * value from the object.\n */\nexports.forEachProperty = function (obj, callback)\n{\n  var p = [];\n  for (var prop in obj)\n    if (obj.hasOwnProperty (prop))\n      callback (prop, obj[prop]);\n  return p;\n};\n\n/**\n * Returns a comma-separated list of quoted strings from an array.\n * @param {Array.<string>} array\n * @returns {string}\n */\nexports.toQuotedList = function (array)\n{\n  return array.length ? \"['\" + array.join (\"', '\") + \"']\" : \"[]\";\n};\n\n/**\n * Indents each line in the given text.\n * @param {string} text The text to be indented.\n * @param {number} [level=1] Indentation depth level.\n * @param {string} [indentStr=\"&nbsp;&nbsp;\"] A white space string that represents each indentation level\n * (ex. spaces or tabs).\n * @return {string}\n */\nexports.indent = function (text, level, indentStr)\n{\n  return text.split (/\\r?\\n/).map (function (line)\n  {\n    return line.trim () && (exports.strRepeat (indentStr || '  ', level || 1) + line);\n  }).join (NL);\n};\n\n/**\n * Repeats a string as many times as specified.\n * @param {string} str The string to be repeated.\n * @param {number} num How many times to repeat.\n * @returns {string}\n */\nexports.strRepeat = function (str, num)\n{\n  return num ? new Array (num + 1).join (str) : '';\n};\n\n/**\n * Appends the second array into the first one, in-place.\n * @param {Array} target\n * @param {Array?} src If null, not specified or an empty array, target will not be modified.\n * @returns {Number} The cardinality of target after the operation.\n */\nexports.arrayAppend = function (target, src)\n{\n  return Array.prototype.push.apply (target, src);\n};\n\n/**\n * Escape Regular Expression.\n *\n * Turn a string into a valid Regular Expression\n * by escaping special chars\n *\n * @param {string} str The string to escape.\n */\nexports.escapeRegExp = function (str)\n{\n  return str.replace(/[.^$*+?()[{\\\\|\\]-]/g, '\\\\$&');\n};\n\n//------------------------------------------------------------------------------\n// PRIVATE\n//------------------------------------------------------------------------------\n\n/**\n * Colorized sprintf.\n * Formats a string with color and injects values into placeholders.\n * Placeholders are represented by the symbol %.\n * To colorize, use markup with the syntax: <code>&lt;color_name>text&lt;/color_name></code>\n * Warning: do not nest color tags!\n *\n * Variable arguments: {...string|...number} - values for each placeholder in <code>str</code>.\n *\n * @param {string} baseColor The base color for the string. Segments with other colors will resume the base color where\n * they end.\n * @param {string} str The string to be formatted.\n * @returns {string}\n */\nfunction csprintf (baseColor, str)\n{\n  /*jshint unused:false */\n  str = exports.sprintf.apply (null, [].slice.call (arguments, 1));\n  str = str.replace (/<(\\w+)>([\\s\\S]*?)<\\/\\1>/g, function (m, m1, m2)\n  {\n    if (m1 === 'bold' || m1 === 'underline')\n      m2 = m2[baseColor];\n    return '±' + m2[m1] + '§';\n  });\n  str = str.replace (/^([\\s\\S]*?)±|§([\\s\\S]*?)±|§([\\s\\S]*?)$/g, function (m, m1, m2, m3)\n  {\n    var s = m1 || (m2 || '') || (m3 || '');\n    return s ? s[baseColor] : s;\n  });\n  return str[baseColor];\n}\n\n/**\n * Similar to <code>csprintf</code> but supports an <code>args</code> argument that should receive a function's\n * <code>arguments</code> array-like object.\n * @private\n *\n * @param {string} baseColor Color name.\n * @param {Object} args Should be a function's <code>arguments</code> array-like object.\n * @returns {string}\n */\nfunction icsprintf (baseColor, args)\n{\n  return exports.csprintf.apply (null, [baseColor].concat ([].slice.call (args)));\n}\n\n/**\n * Generates a tree of folder names and file names from a (possibliy) unsorted linear list of file paths.\n * @param {string[]} filePaths\n * @returns {{files: string[], subfolders: {}}}\n */\nfunction createFileTree (filePaths)\n{\n  var path = require ('path')\n    , root = {\n        files:      [],\n        subfolders: {}\n      };\n\n  filePaths.forEach (function (filename)\n  {\n    var dir = path.dirname (filename)\n      , folderPtr = root;\n    if (dir)\n      dir.split (path.sep).forEach (function (segment)\n      {\n        if (!folderPtr.subfolders[segment])\n          folderPtr.subfolders[segment] = {\n            files:      [],\n            subfolders: {}\n          };\n        folderPtr = folderPtr.subfolders[segment];\n      });\n    folderPtr.files.push (filename);\n  });\n  return root;\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/lib/types.js":"/**\n * Angular Builder's data types.\n *\n * @module lib/types\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\n/* jshint unused: vars */\n\nvar util = require ('./gruntUtil')\n  , extend = util.extend;\n\n//======================================================================================================================\n\n/**\n * Angular Builder's task options.\n *\n * Note: Middleware classes augment this class with their own options.\n *\n * @constructor\n * @mixes BuildAssetsOptionsMixin\n * @mixes MakeDebugBuildOptionsMixin\n * @mixes OverrideDependenciesOptionsMixin\n * @mixes MakeReleaseBuildOptionsMixin\n * @mixes ExportSourcePathsOptionsMixin\n * @mixes ExportRequiredStylesheetsOptionsMixin\n * @mixes ExportRequiredTemplatesOptionsMixin\n */\nfunction TaskOptions ()\n{}\n\nTaskOptions.prototype = {\n  /**\n   * Main module name. Only this module and its dependencies will be exported.\n   * @type {string}\n   */\n  mainModule:         '',\n  /**\n   * A list of module names to ignore when building.\n   * This allows the source code to contain references to modules not present in the build (ex. 3rd party libraries that\n   * are loaded independently).\n   *\n   * If a module reference (for module access or for declaring a dependency) is found in the source code, which targets\n   * a module that is not declared anywhere in the build's source files, the build operation aborts when that module\n   * name is not present on this list.\n   * @type {string|string[]}\n   */\n  externalModules:    '',\n  /**\n   * A list of framework built-in modules (ex. 'ng') that will always be appended to the `externalModules` list when\n   * running tasks, so that references to them are ignored by the builder.\n   * This is reserved for internal use, but could be overridden if you wish to completely replace the built-in behavior.\n   * @type {string[]}\n   */\n  builtinModules:     ['ng'],\n  /**\n   * A list of modules to be excluded from the build.\n   *\n   * Unlike <code>externalModules</code>, which excludes each module and all of its dependencies, this option only\n   * excludes the specified module from the output, not its dependencies.\n   * One typical use for this is to exclude the main module from one or more build tasks.\n   * @type {string[]}\n   */\n  excludedModules:    [],\n  /**\n   * A list of file paths to prepend to the build output.\n   * This forces the inclusion of specific script files, independently of any source file scanning performed\n   * by Grunt.\n   * @type {string[]}\n   */\n  require:            [],\n  /**\n   * Allows loading third-party middleware into the middleware stack.\n   * This is a task-level option. Do not specify it at target-level.\n   *\n   * This option allows the definition of a list of external middleware modules to load and for each one, to specify\n   * where to place it on the middleware stack.\n   * Each element in the list defines a module name (with the `load` property) and one of the following properties:\n   * `before`, `after` or `over`. The property name selects the insertion position on the middleware stack for the\n   * loaded one.\n   * Note: internal middlewares are loaded into the middleware stack before the external middlewares.\n   * @type {Array.<{load: string, before: ?string, after: ?string}>|null}\n   */\n  externalMiddleware: null,\n  /**\n   * Defines the list of middleware bundled with angular-builder.\n   * This is a task-level option. Do not specify it at target-level.\n   *\n   * This option sets a list of modules names to load and assemble into a middleware stack in the specified order.\n   * This is reserved for internal use, but could be overridden if you wish to replace some or all of the\n   * built-in behavior. Usually, though, you should use the `externalMiddleware` option.\n   * WARNING: the order of middleware listed here is important! If you change it, the build process may fail!\n   * @type {string[]}\n   * @const\n   */\n  internalMiddleware: [\n    './middleware/overrideDependencies',\n    './middleware/analyzeSourceCode',\n    './middleware/exportSourcePaths',\n    './middleware/includeRequiredScripts',\n    './middleware/buildForeignScripts',\n    './middleware/makeDebugBuild',\n    './middleware/makeReleaseBuild',\n    './middleware/exportRequiredStylesheets',\n    './middleware/exportRequiredTemplates',\n    './middleware/buildAssets'\n  ]\n};\n\n//======================================================================================================================\n\n/**\n * A Grunt files array with extended options.\n * @interface\n */\nfunction GruntFilesArrayExt ()\n{}\n\nGruntFilesArrayExt.prototype = {\n  /**\n   * @type {string[]|null}\n   */\n  src:          null,\n  /**\n   * @type {string|null}\n   */\n  dest:         null,\n  /**\n   * A list of filenames or glob patterns that specify which javascript files should always be included in the build,\n   * even if they have no module declarations.\n   *\n   * <b>Warning:</b> the files must also be matched by <code>src</code> to be included.\n   *\n   * <b>Note:</b> patterns without slashes will match against the basename of the path even if it contains slashes,\n   * eg. pattern <code>*.js</code> will match filepath <code>path/to/file.js</code>.\n   *\n   * Usually, when a script file is found in the set of source files which doesn't contain a module declaration,\n   * that file is ignored.\n   * But, if the file name and path matches a file name or glob pattern specified here, it will still be included.\n   *\n   * Non-module files are output in the same order they were read, and <b>before</b> any module.\n   *\n   * <b>Tip:</b> You can append the current step's result script to another one that resulted from a previous build\n   * step.\n   * If you specify a target or file group exclusively for standalone script files and append the result to other built\n   * files, you will have more control on the order of the assembled files.\n   *\n   *  @type {string|string[]|null}\n   */\n  forceInclude: null\n\n};\n\n//======================================================================================================================\n\n/**\n * API for an Angular Builder middleware plugin.\n * Defines handlers for the three stages of the build process: analyze --> trace --> build.\n *\n * Note: implementing classes must have a compatible constructor.\n *\n * @interface\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction MiddlewareInterface (context)\n{}\n\nMiddlewareInterface.prototype = {\n  /**\n   * Load and analyze the specified source files.\n   * Invoked once.\n   *\n   * @param {GruntFilesArrayExt} filesArray The set of source code files to be processed.\n   */\n  analyze: function (filesArray) {},\n  /**\n   * Scan a module for relevant information.\n   * Invoked once for each required module in the application, in the order defined by the dependency graph.\n   * Each module, in turn, is passed trough all the middlewares on the stack.\n   *\n   * Note: external and excluded modules are never traced; dependencies of excluded modules may be traced.\n   *\n   * @param {ModuleDef} module Gives you access to the module's metadata and its source code.\n   */\n  trace:   function (module) {},\n  /**\n   * Build the compilation output.\n   * Invoked once.\n   *\n   * @param {string} targetScript Path to the output script.\n   */\n  build:   function (targetScript) {}\n};\n\n//======================================================================================================================\n\n/**\n * Context event names.\n * @enum {string}\n * @const\n */\nvar ContextEvent = {\n  ON_INIT:          'init',\n  ON_AFTER_ANALYZE: 'after-analyze',\n  ON_AFTER_TRACE:   'after-trace',\n  ON_AFTER_BUILD:   'after-build'\n};\n\n/**\n * The execution context for the middleware stack.\n * Contains shared information available throughout the middleware stack.\n * @constructor\n * @param grunt The Grunt API.\n * @param task The currently executing Grunt task.\n * @param {TaskOptions} defaultOptions The default values for all of the Angular Builder's options, including all\n * middleware options.\n */\nfunction Context (grunt, task, defaultOptions)\n{\n  this.grunt = grunt;\n  this.options = extend ({}, defaultOptions, task.options ());\n  if (task.flags.debug !== undefined || grunt.option ('build') === 'debug') {\n    this.options.debugBuild.enabled = true;\n    this.options.releaseBuild.enabled = false;\n  }\n  this.verbose = grunt.option ('verbose');\n  // Clone the external modules and use it as a starting point.\n  this.modules = extend ({}, this._setupExternalModules ());\n  // Reset tracer.\n  this.loaded = {};\n  // Reset the scripts list to a clone of the `require` option or to an empty list.\n  this.standaloneScripts = (this.options.require || []).slice ();\n  this.shared = {};\n  this._events = {};\n}\n\nContext.prototype = {\n  /**\n   * The Grunt API.\n   */\n  grunt:                 null,\n  /**\n   * Task-specific options set on the Gruntfile.\n   * @type {TaskOptions}\n   */\n  options:               null,\n  /**\n   * <code>true</code> if the task is running in verbose mode.\n   * @type {boolean}\n   */\n  verbose:               false,\n  /**\n   * A map of module names to module definition records.\n   * @type {Object.<string, ModuleDef>}\n   */\n  modules:               null,\n  /**\n   * A map of module names to boolean values that registers which modules were already\n   * emmited to/ referenced on the output.\n   * @type {Object.<string,boolean>}\n   */\n  loaded:                null,\n  /**\n   * A list of scripts that have no module definitions but still are forced to being included in the build.\n   * Each item contains the filename and the file content.\n   * @type {Array.<{path: string, content: string}>}\n   */\n  standaloneScripts:     null,\n  /**\n   * Source code to be prepended to the output build file.\n   * @type {string}\n   */\n  prependOutput:         '',\n  /**\n   * Source code to be appended to the output build file.\n   * @type {string}\n   */\n  appendOutput:          '',\n  /**\n   * Custom data shared between extensions.\n   */\n  shared:                null,\n  /**\n   * A map of registered event handlers.\n   * @type {Object.<ContextEvent,Function[]>}\n   * @private\n   */\n  _events:               null,\n  /**\n   * Registers an event handler.\n   * @param {ContextEvent} eventName\n   * @param {function()} handler\n   */\n  listen:                function (eventName, handler)\n  {\n    if (!this._events[eventName])\n      this._events[eventName] = [];\n    this._events[eventName].push (handler);\n  },\n  /**\n   * Calls all registered event handlers for the specified event.\n   * @param {ContextEvent} eventName\n   */\n  trigger:               function (eventName)\n  {\n    var e = this._events[eventName];\n    if (e)\n      e.forEach (function (handler)\n      {\n        handler ();\n      });\n  },\n  /**\n   * Registers the configured external modules so that they can be ignored during the build output generation.\n   * @returns {Object.<string, ModuleDef>}\n   * @private\n   */\n  _setupExternalModules: function ()\n  {\n    /** @type {Object.<string, ModuleDef>} */\n    var modules = {};\n    ((typeof this.options.externalModules === 'string' ?\n      [this.options.externalModules] : this.options.externalModules\n      ) || []).\n      concat (this.options.builtinModules).\n      forEach (function (moduleName)\n    {\n      // Ignore redundant names.\n      if (!modules[moduleName]) {\n        /** @type {ModuleDef} */\n        var module = modules[moduleName] = new ModuleDef (moduleName);\n        module.external = true;\n      }\n    });\n    return modules;\n  }\n\n};\n\n//======================================================================================================================\n\n/**\n * A module definition record.\n * Contains all javascript defining the module, read from one or more source files.\n * @constructor\n * @param {string} name\n */\nfunction ModuleDef (name)\n{\n  this.name = name;\n  this.bodies = [];\n  this.filePaths = [];\n}\n\nModuleDef.prototype = {\n  /**\n   * The module's name.\n   * @type {!string}\n   */\n  name:      '',\n  /**\n   * Relative file paths to the source script files.\n   * The first entry corresponds to the file that starts the module definition.\n   * Note: empty string elements will be ignored.\n   * Note: at least one element must be present, even if empty.\n   * @type {string[]}\n   */\n  filePaths: null,\n  /**\n   * The content of the file that starts the module definition.\n   * If null, the file was not yet read.\n   * @type {?string}\n   */\n  head:      null,\n  /**\n   * The content of each additional file that appends definitions to the module.\n   * If there are no additional files for the module, the value will be an empty array.\n   * @type {string[]}\n   */\n  bodies:    null,\n  /**\n   * List with the names of the required modules.\n   * If no modules are required, the value will be an empty array.\n   * @type {string[]}\n   */\n  requires:  null,\n  /**\n   * When true, the module is not included in the build but it's possibly referenced in the source code.\n   * @type {boolean}\n   */\n  external:  false,\n  /**\n   * Third parameter of a module declaration, if present.\n   * @type {string|undefined}\n   */\n  configFn:  undefined\n};\n\n//======================================================================================================================\n\n/**\n * A function result composite value that includes a status value and optional data.\n * @name OperationResult\n *//**\n * Result status code. 0 = OK, other values depend on the context this is being used on.\n * @name OperationResult#status\n * @type {number}\n */\n/**\n * Optional output data from the function that returned this record.\n * @name OperationResult#data\n * @type {*}\n */\n\n//======================================================================================================================\n// EXPORT\n//======================================================================================================================\n\nmodule.exports = {\n  ModuleDef:          ModuleDef,\n  ExtensionInterface: MiddlewareInterface,\n  ContextEvent:       ContextEvent,\n  Context:            Context,\n  TaskOptions:        TaskOptions\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/lib/sandboxRun.js":"/**\n * A javascript source code analysis library that evaluates code in a sandboxed environment.\n *\n * @module lib/sandboxRun\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\n/**\n * Checks if a block of javascript code performs any operation other than defining a module.\n * In order to do that, it executes the code in an isolated sandbox.\n * If any function or variable is created on the global scope as a result from that execution, a warning is issued.\n * @param {string} source Javascript code to be analized.\n * @return {false|Object} Returns false if the code is valid, otherwise returns an object with detected global scope\n * properties as keys.\n */\nexports.detectInvalidSourceCode = function (source)\n{\n  var vm = require ('vm')\n    , mockupMethod = function () { return angularModuleMockup; }\n    , angularModuleMockup = {\n        animation:  mockupMethod,\n        config:     mockupMethod,\n        constant:   mockupMethod,\n        controller: mockupMethod,\n        directive:  mockupMethod,\n        factory:    mockupMethod,\n        filter:     mockupMethod,\n        provider:   mockupMethod,\n        run:        mockupMethod,\n        service:    mockupMethod,\n        value:      mockupMethod\n      }\n    , noop = function () {}\n    , consoleMockup = {\n        assert:         noop,\n        debug:          noop,\n        count:          noop,\n        error:          noop,\n        group:          noop,\n        groupCollapsed: noop,\n        groupEnd:       noop,\n        info:           noop,\n        log:            noop,\n        profile:        noop,\n        profileEnd:     noop,\n        time:           noop,\n        timeEnd:        noop,\n        timeStamp:      noop,\n        trace:          noop,\n        warn:           noop\n      }\n    , sandbox = {\n        angular: {\n          module: function () { return angularModuleMockup; }\n        },\n        console: consoleMockup,\n        window:  {}\n      };\n  try {\n    vm.runInNewContext (source, sandbox);\n    delete sandbox.angular;\n    delete sandbox.console;\n    delete sandbox.window;\n    // Check if the sandbox contains any property at all.\n    /*jshint unused:false */\n    for (var prop in sandbox)\n      throw sandbox;\n    return false;\n  }\n  catch (e) {\n    // Code execution failed with an undefined reference or at least one new variable of function has been added to\n    // the global scope.\n    delete sandbox.angular;\n    delete sandbox.console;\n    delete sandbox.window;\n    return sandbox;\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/lib/sourceExtract.js":"/**\n * A javascript source code extraction library.\n *\n * @module lib/sourceExtract\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar util = require ('./gruntUtil');\n\nvar tokenize = util.tokenize\n  , sprintf = util.sprintf;\n\n//------------------------------------------------------------------------------\n// TYPES\n//------------------------------------------------------------------------------\n\n/**\n * @name ModuleClosureInfo\n * Information about a module definition enclosed in a self-calling function.\n * Source code syntax:\n * <code>\n * (function (x) {\n *   ...\n * })(angular.module(...));\n * </code>\n *//**\n * @name ModuleClosureInfo#moduleVar\n * Name of the closure parameter that receives a reference to the module.\n * @type {string}\n *//**\n * @name ModuleClosureInfo#closureBody\n * Source code inside the closure.\n * @type {string}\n *//**\n * @name ModuleClosureInfo#moduleDecl\n * Module declaration expression (<code>angular.module(...)</code>).\n * @type {string}\n *//**\n * @name ModuleClosureInfo#moduleName\n * The name of the module being declared.\n * @type {string}\n *//**\n * @name ModuleClosureInfo#moduleDeps\n * List of module dependencies.\n * @type {string}\n */\n\n/**\n * @name ModuleHeaderInfo\n * Information parsed from a module reference with the syntax:\n * <code>angular.module('name',[])</code> or\n * <code>angular.module('name')</code>.\n *//**\n * @name ModuleHeaderInfo#status\n * The result status.\n * @type {EXTRACT_STAT}\n *//**\n * @name ModuleHeaderInfo#name\n * Module name.\n * @type {string}\n *//**\n * @name ModuleHeaderInfo#requires\n * List of module dependencies.\n * @type {string[]|undefined}\n *//**\n * @name ModuleHeaderInfo#append\n * If <code>false</code> this module reference is declaring the module and its dependencies.\n * If <code>true</code> this module reference is appending definitions to a module declared elsewhere.\n * @type {boolean}\n *//**\n * @name ModuleHeaderInfo#configFn\n * Third parameter of a module declaration, if present.\n * @type {string|undefined}\n */\n\n/**\n * Error codes returned by some functions of the sourceTrans module.\n * @enum\n */\nvar EXTRACT_STAT = {\n  OK:               0,\n  MULTIPLE_MODULES: -1,\n  MULTIPLE_DECLS:   -2\n};\n\n//------------------------------------------------------------------------------\n// PRIVATE DATA\n//------------------------------------------------------------------------------\n\n/**\n * Matches a comment block preceding a module definition.\n * This allows excluding module definitions thar lie inside comment blocks.\n * @type {string}\n */\nvar MATCH_LEADING_COMMENT = '(/`*(?:(?!/`*)[`s`S])*?)?';\n/**\n * Regular expression string that matches an angular module declaration in one of these formats:\n * angular.module('name',[dependencies]) or\n * angular.module('name')\n * @type {string}\n */\nvar MODULE_DECL_EXP = 'angular `. module `( [\"\\'](.*?)[\"\\'] (?:, (`[[^`]]*`]))? (,[`s`S]+)?`)';\n/**\n * Regular expression string that matches the start of a declaration for a specific module.\n * <MOD> is replaced by the module name being extracted before the RegExp is compiled.\n * This also captures whether there is a variable assignment preceding the module declaration.\n * @type {string}\n */\nvar MODULE_EXTR_EXP = '(= )?angular `. module `( [\"\\']<MOD>[\"\\'] (?:, `[[`s`S]*?`])? (,[`s`S]+)?`)( ; )?';\n/**\n * Regular expression string that matches javascript block/line comments.\n * @type {string}\n */\nvar MATCH_COMMENTS_EXP = '(`/`*[`s`S]*?`*`/|`/`/.*)';\n/**\n * Matches source code consisting only of white space and javascript comments.\n * @type {RegExp}\n */\nvar MATCH_NO_SCRIPT = new RegExp (tokenize (sprintf ('^ (% )*$', MATCH_COMMENTS_EXP)));\n/**\n * Allows the removal of /* block comments and // line comments to ensure JSON.parse() success.\n * @type {RegExp}\n */\nvar MATCH_COMMENT_BLOCKS = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$|/gm;\n/**\n * Allows the removal of trailing commas to ensure JSON.parse() success.\n * @type {RegExp}\n */\nvar MATCH_LAST_COMMA = /,(?=\\s*\\]$)/;\n/**\n * Matches white space and javascript comments at the beginning of a file.\n * @type {RegExp}\n */\nvar TRIM_COMMENTS_TOP = new RegExp (tokenize (sprintf ('^ (% )*', MATCH_COMMENTS_EXP)));\n/**\n * Matches white space and javascript comments at the end of a file.\n * @type {RegExp}\n */\n//Note: max.limit of 3 prevents infinite matching and thread lockup.\nvar TRIM_COMMENTS_BOTTOM = new RegExp (tokenize (sprintf (' (% ){0,3}$', MATCH_COMMENTS_EXP)));\n/**\n * Matches a self-invoking anonymous function that wraps all the remaining source code.\n * It assumes white space and comments have been already removed from both ends of the script.\n * It searches for one of these patterns:\n * <code>\n * (function () { ... }) ();\n * function (var) { ... }) (angular.module('name'));\n * function (var) { ... }) (angular.module('name', [dependencies]));\n * </code>\n * It also matches the following alternate self-invoking function syntax applied to any of the previous patterns:\n * <code>\n * !function () { ... } ();\n * </code>\n * @type {RegExp}\n */\nvar MATCH_MODULE_CLOSURE = new RegExp (tokenize (sprintf (\n  '^[`(!]function `( (.+?)? `) `{ ([`s`S]*?) `} `)? `( (%)? `) ;?$', MODULE_DECL_EXP)), 'i');\n\n//------------------------------------------------------------------------------\n// PUBLIC\n//------------------------------------------------------------------------------\n\n/**\n * Error codes returned by some functions of the sourceExtract module.\n * @type {EXTRACT_STAT}\n */\nexports.EXTRACT_STAT = EXTRACT_STAT;\n\n/**\n * Searches for an angular module declaration and, if found, extracts the module's name and dependencies from it.\n * Note: if the returned 'requires' property is undefined, that means the module declaration is appending\n * definitions to a module defined elsewhere.\n * Otherwise, the module declaration is beginning the module definition.\n *\n * @param {string} source Javascript source code.\n * @returns {ModuleHeaderInfo|null} Null means the file does not contain any\n * module definition.\n */\nexports.extractModuleHeader = function (source)\n{\n  var LEADING_COMMENT = 1\n    , MODULE_NAME = 2\n    , MODULE_DEPS = 3\n    , CONFIG_FN = 4;\n  var R = new RegExp (tokenize (MATCH_LEADING_COMMENT + MODULE_DECL_EXP), 'ig');\n  var all = [], m;\n\n  // Collect all matches but exclude declarations inside comment blocks.\n  while ((m = R.exec (source)) !== null)\n    if (!m[LEADING_COMMENT] || m[LEADING_COMMENT].match (/\\*\\//))\n      all.push (m);\n\n  // Ignore the file if it has no angular module definition.\n  if (!all.length)\n    return null;\n  var moduleName = all[0][MODULE_NAME]\n    , headerIndex = false;\n  for (var i = 0, x = all.length; i < x; ++i) {\n    if (all[i][MODULE_NAME] !== moduleName)\n      return {status: EXTRACT_STAT.MULTIPLE_MODULES};\n    if (all[i][MODULE_DEPS] !== undefined) {\n      if (headerIndex === false)\n        headerIndex = i;\n      else return {status: EXTRACT_STAT.MULTIPLE_DECLS};\n    }\n  }\n  m = all[headerIndex || 0];\n  return /** @type {ModuleHeaderInfo} */ {\n    status:   EXTRACT_STAT.OK,\n    name:     moduleName,\n    append:   headerIndex === false,\n    requires: m[MODULE_DEPS] &&\n                JSON.parse (\n                  m[MODULE_DEPS]\n                    .replace (MATCH_COMMENT_BLOCKS, '')\n                    .replace (MATCH_LAST_COMMA, '')\n                    .replace (/'/g, '\"')\n                ) || [],\n    configFn: m[CONFIG_FN]\n  };\n};\n\n/**\n * Returns a regular expression that matches the start of a declaration for a specific module.\n * @param {string} moduleName\n * @returns {RegExp}\n */\nexports.moduleExtractionPattern = function (moduleName)\n{\n  return new RegExp (tokenize (MODULE_EXTR_EXP.replace ('<MOD>', moduleName), 'ig'));\n};\n\n/**\n * If the give source code consists only of a module-defining closure, returns information about that closure.\n * @param {string} source\n * @returns {ModuleClosureInfo|boolean} False if no closure was found or if there is more code besides the closure.\n */\nexports.getModuleClosureInfo = function (source)\n{\n  /** @type {Array.<string>} */\n  var m;\n  if ((m = source.match (MATCH_MODULE_CLOSURE))) {\n    // Extract the function's body and some additional information about the module and how it's being declared.\n    return /** @type {ModuleClosureInfo} */{\n      moduleVar:   m[1],\n      closureBody: m[2],\n      moduleDecl:  m[3],\n      moduleName:  m[4],\n      moduleDeps:  m[5]\n    };\n  }\n  return false;\n};\n\n/**\n * Remove the existing closure from the source code.\n * @param {string} source The original source code.\n * @param {string} clean Source code with white space and comments trimmed from both ends.\n * @param {string} closureBody The full closure source code.\n */\nexports.extractClosure = function (source, clean, closureBody)\n{\n  var p = source.indexOf (clean);\n  // Extract any comments found before the closure.\n  var before = source.substr (0, p);\n  // Extract any comments found after the closure.\n  var after = source.substr (p + clean.length);\n\n  return before + closureBody + after;\n};\n\n/**\n * Checks if the given source code consists only of white space and javascript comments.\n * @param {string} source\n * @returns {boolean}\n */\nexports.matchWhiteSpaceOrComments = function (source)\n{\n  return source.match (MATCH_NO_SCRIPT) !== null;\n};\n\n/**\n * Returns the given ource code with all white space and comments removed from both ends.\n * @param {string} source\n * @returns {string}\n */\nexports.trimComments = function (source)\n{\n  return source.replace (TRIM_COMMENTS_TOP, '').replace (TRIM_COMMENTS_BOTTOM, '');\n};\n\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/lib/sourceTrans.js":"/**\n * A javascript source code transformation library.\n *\n * @module lib/sourceTrans\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar sandboxRun = require ('./sandboxRun')\n  , sourceExtract = require ('./sourceExtract')\n  , util = require ('./gruntUtil');\n\nvar sprintf = util.sprintf;\n\n//------------------------------------------------------------------------------\n// TYPES\n//------------------------------------------------------------------------------\n\n/**\n * Error codes returned by some functions of the sourceTrans module.\n * @enum\n */\nvar TRANS_STAT = {\n  OK:                  0,\n  NO_CLOSURE_FOUND:    -1,\n  RENAME_REQUIRED:     -2,\n  INVALID_DECLARATION: -3\n};\n\n//------------------------------------------------------------------------------\n// PRIVATE\n//------------------------------------------------------------------------------\n\n/**\n * Regular expression string that matches a javascript identifier.\n * Note: % will be replaced by the identifier.\n * Note: this is a poor man's identifier matcher! It may fail in many situations.\n * @type {string}\n */\nvar MATCH_IDENTIFIER_EXP = '\\\\b%\\\\b';\n\n//------------------------------------------------------------------------------\n// PUBLIC\n//------------------------------------------------------------------------------\n\n/**\n * Error codes returned by some functions of the sourceTrans module.\n * @type {TRANS_STAT}\n */\nexports.TRANS_STAT = TRANS_STAT;\n\n/**\n * Optimizes the source code and also performs some checks on it, preparing it for a subsequent\n * concatenation with other files from the same module.\n * If the source is already wrapping code in a self-invoking function, it unwraps it and renames module\n * references to match a future re-wrapping.\n * Then it replaces references to angular.module(name) by a shorter form.\n *\n * @param {string} source\n * @param {string} moduleName\n * @param {string} moduleVar\n * @returns {OperationResult} Either the optimized source code or a status code if no optimization was performed.\n */\nexports.optimize = function (source, moduleName, moduleVar)\n{\n  /**\n   * Source code with all white space and comments removed from both ends.\n   * @type {string}\n   */\n  var clean = sourceExtract.trimComments (source);\n\n  // Extract the function's body and some additional information about the module and how it's being declared.\n  var modInfo = sourceExtract.getModuleClosureInfo (clean);\n\n  // Check if the script already encloses code inside a self-invoking closure.\n  if (modInfo) {\n\n    // Sanity check.\n    if (modInfo.moduleName && modInfo.moduleName !== moduleName)\n      return /** @type {OperationResult} */ {status: TRANS_STAT.INVALID_DECLARATION, data: modInfo.moduleName};\n\n    // Let's get that closure.\n    source = sourceExtract.extractClosure (source, clean, modInfo.closureBody);\n\n    // If the angular module is already being passed as a parameter to the closure, and that parameter has a different\n    // name from the preset name for module references, rename that parameter to the predefined name.\n    if (modInfo.moduleVar && modInfo.moduleDecl && modInfo.moduleVar !== moduleVar)\n    // Let the caller decide what to do.\n      return /** @type {OperationResult} */ {\n        status: TRANS_STAT.RENAME_REQUIRED,\n        data:   modInfo\n      };\n    return /** @type {OperationResult} */ {status: TRANS_STAT.OK, data: source};\n  }\n  // No closure was detected.\n  return /** @type {OperationResult} */ {status: TRANS_STAT.NO_CLOSURE_FOUND};\n};\n\n\n/**\n * The script has no self-invoking closure for a module definition.\n * Check if there is code (other than a module definition) lying at a root level on the script, like,\n * for instance, private functions.\n * That kind of code would behave differently between a release and a debug build, as in a release build\n * it will be wrapped in a self-invoking closure but, on a debug build, it will not.\n *\n * @param {string} source\n * @returns {Object|boolean} <code>True</code> if the source code is valid, otherwise an Object containing the detected\n * symbols created in the global scope.\n */\nexports.validateUnwrappedCode = function (source)\n{\n  var sandbox = sandboxRun.detectInvalidSourceCode (source);\n  return sandbox || true;\n};\n\n/**\n * Replace angular module reference expressions (with syntax <code>angular.module(...)</code>) inside the closure by\n * variable references.\n * If the module expression defines no services/whatever, remove-it, as it will be regenerated outside the closure.\n *\n * @param {ModuleDef} module\n * @param {string} source\n * @param {string} moduleVar Variable name for module references.\n * @returns {string}\n */\nexports.renameModuleRefExps = function (module, source, moduleVar)\n{\n  /** Matches the start of a declaration for the current module.*/\n  var declPattern = sourceExtract.moduleExtractionPattern (module.name);\n\n  return source.replace (declPattern, function (decl, assign, configFn, semicolon)\n  {\n    return (assign || '') + (semicolon && !assign ? '' : moduleVar + (semicolon || ''));\n  });\n};\n\n/**\n * Renames angular module variable references inside the closure.\n * If the module expression defines no services/whatever, remove-it, as it will be regenerated outside the closure.\n *\n * @param {string} source\n * @param {string} oldVar Old variable name for module references.\n * @param {string} moduleVar Variable name for module references.\n * @returns {string}\n */\nexports.renameModuleVariableRefs = function (source, oldVar, moduleVar)\n{\n  return source.replace (new RegExp (sprintf (MATCH_IDENTIFIER_EXP, oldVar), 'g'), moduleVar);\n};","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/analyzeSourceCode.js":"/**\n * An AngularJS source code loader and analyser.\n *\n * @module middleware/analyzeSourceCode\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nexports.middleware = AnalyzeSourceCodeMiddleware;\n\nvar util = require ('../lib/gruntUtil')\n  , types = require ('../lib/types')\n  , sourceExtract = require ('../lib/sourceExtract');\n\nvar ModuleDef = types.ModuleDef\n  , warn = util.warn\n  , reportErrorLocation = util.reportErrorLocation\n  , fatal = util.fatal\n  , info = util.info\n  , NL = util.NL;\n\n/**\n * An AngularJS source code loader and analyser middleware.\n *\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction AnalyzeSourceCodeMiddleware (context)\n{\n  var grunt = context.grunt;\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    var src = util.sortFilesBeforeSubfolders (filesArray.src);\n\n    // Load the script files and scan them for module definitions.\n    src.forEach (function (path)\n    {\n\n      if (!grunt.file.exists (path)) {\n        warn ('Source file \"' + path + '\" not found.');\n        return;\n      }\n      // Read the script and scan it for a module declaration.\n      var script = grunt.file.read (path);\n      var moduleHeader = sourceExtract.extractModuleHeader (script);\n      // Ignore irrelevant files.\n      if (!moduleHeader) {\n        if (!filesArray.forceInclude || !grunt.file.isMatch ({matchBase: true}, filesArray.forceInclude, path)) {\n          info ('Ignored file: %', path.cyan);\n          return;\n        }\n        context.standaloneScripts.push ({\n          path:    path,\n          content: script\n        });\n      }\n      else setupModuleInfo (moduleHeader, script, path);\n    });\n\n  };\n\n  this.trace = function (module)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.build = function (targetScript)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PRIVATE\n  //--------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Store information about the specified module retrieved from the given source code on the specified file.\n   *\n   * @param {ModuleHeaderInfo} moduleHeader\n   * @param {string} fileContent\n   * @param {string} filePath\n   */\n  function setupModuleInfo (moduleHeader, fileContent, filePath)\n  {\n    var STAT = sourceExtract.EXTRACT_STAT;\n    switch (moduleHeader.status) {\n\n      case STAT.OK:\n\n        // Get information about the specified module.\n        var module = context.modules[moduleHeader.name];\n        // If this is the first time a specific module is mentioned, create the respective information record.\n        if (!module)\n          module = context.modules[moduleHeader.name] = new ModuleDef (moduleHeader.name);\n        // Skip the file if it defines an external module.\n        else if (module.external)\n          return;\n        // Reject additional attempts to redeclare a module (only appending is allowed).\n        else if (module.head && !moduleHeader.append)\n          fatal ('Can\\'t redeclare module <cyan>%</cyan>', moduleHeader.name);\n        // The file is appending definitions to a module declared elsewhere.\n        if (moduleHeader.append) {\n          module.bodies.push (fileContent);\n          // Append the file path to the bottom of the paths list.\n          module.filePaths.push (filePath);\n        }\n        // Otherwise, the file contains a module declaration.\n        else {\n          if (module.head)\n            fatal ('Duplicate module definition: <cyan>%</cyan>', moduleHeader.name);\n          module.head = fileContent;\n          // Add the file path to the top of the paths list.\n          module.filePaths.unshift (filePath);\n          module.requires = moduleHeader.requires;\n        }\n        module.configFn = moduleHeader.configFn;\n        break;\n\n      case STAT.MULTIPLE_MODULES:\n\n        warn ('Definitions for multiple modules were found on the same file.' + NL + reportErrorLocation (filePath));\n        break;\n\n      case STAT.MULTIPLE_DECLS:\n\n        warn ('More than one module declaration was found on the same file.' + NL + reportErrorLocation (filePath));\n    }\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/buildAssets.js":"/**\n * Angular Builder middleware module.\n *\n * @module middleware/buildAssets\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar util = require ('../lib/gruntUtil')\n  , path = require ('path')\n  , fs = require ('fs');\n\nvar MATCH_URLS = /\\burl\\s*\\(\\s*('|\")?\\s*(.*?)\\s*\\1?\\s*\\)/gi;\n\n//----------------------------------------------------------------------------------------------------------------------\n// OPTIONS\n//----------------------------------------------------------------------------------------------------------------------\n\n/**\n * Options specific to the Asset References Handler middleware.\n * @constructor\n */\nfunction BuildAssetsOptions ()\n{}\n\nBuildAssetsOptions.prototype = {\n  /**\n   * Set to `true` to enable the assets builder.\n   * @type {boolean}\n   */\n  enabled:   false,\n  /**\n   * Directory path that will be used as the reference point from where relative asset urls are calculated.\n   * This determines where assets are exported to.\n   * If you specify a relative path, it is resolved from the current filegroup's destination folder.\n   * @type {string}\n   */\n  targetDir: '',\n  /**\n   * When `false`, required assets are copied to the assets target directory.\n   *\n   * When `true`, symlinks are generated instead. This speeds up the build operation considerably, and also saves disk\n   * space.\n   *\n   * If your operating system does not support symlinks, or if you want to archive or upload the build output, use\n   * `false`.\n   * @type {boolean}\n   */\n  symlink:   true\n};\n\n/**\n * @mixin\n */\nvar BuildAssetsOptionsMixin = {\n  /**\n   * Options specific to the Asset References Handler middleware.\n   * @type {BuildAssetsOptions}\n   */\n  assets: new BuildAssetsOptions ()\n};\n\nexports.options = BuildAssetsOptionsMixin;\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexports.middleware = BuildAssetsMiddleware;\n\n/**\n * Exports the assets required by the application's modules.\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction BuildAssetsMiddleware (context)\n{\n  var grunt = context.grunt\n    , options = context.options.assets;\n\n  /**\n   * Records which files have been already exported.\n   * Prevents duplicate asset exports.\n   * It's a map of absolute file names to boolean `true`.\n   * @type {Object.<string,boolean>}\n   */\n  var exportedAssets = {};\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.trace = function (module)\n  {\n    /* jshint unused: vars */\n    // Do nothing.\n  };\n\n  this.build = function (targetScript)\n  {\n    if (!options.enabled) return;\n    // Import file paths.\n    var stylehseets = grunt.config (context.options.requiredStylesheets.exportToConfigProperty);\n    if (!stylehseets) return; // No stylesheet sources are configured.\n    var targetPath = path.dirname (targetScript);\n    stylehseets.forEach (function (filePath)\n    {\n      var src = grunt.file.read (filePath);\n      scan (path.dirname (filePath), targetPath, src);\n    });\n\n  };\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PRIVATE\n  //--------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Scans a stylesheet for asset URL references and copies the assets to the build folder.\n   * @private\n   * @param {string} basePath\n   * @param {string} targetPath\n   * @param {string} sourceCode\n   */\n  function scan (basePath, targetPath, sourceCode)\n  {\n    var match;\n    while ((match = MATCH_URLS.exec (sourceCode))) {\n      var url = match[2];\n      if (!url.match (/^http/i) && url[0] !== '/') { // Skip absolute URLs\n        var absSrcPath = path.resolve (basePath, url)\n          , absDestPath = path.resolve (targetPath, options.targetDir, url)\n          , relDestPath = path.relative (targetPath, absDestPath);\n        if (relDestPath[0] === '.')\n          return util.warn ('Relative asset url falls outside the build folder: <cyan>%</cyan>%', url, util.NL);\n        if (exportedAssets[absDestPath]) // skip already exported asset\n          continue;\n        else exportedAssets[absDestPath] = true;\n        var absTargetFolder = path.dirname (absDestPath);\n        grunt.file.mkdir (absTargetFolder);\n        if (options.symlink)\n          fs.symlinkSync (absSrcPath, absDestPath);\n        else grunt.file.copy (absSrcPath, absDestPath);\n      }\n    }\n  }\n\n}\n\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/buildForeignScripts.js":"/**\n * Angular Builder middleware module.\n *\n * @module middleware/buildForeignScripts\n * @requires module:middleware/makeDebugBuild\n * @requires module:middleware/makeReleaseBuild\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nexports.middleware = BuildForeignScriptsMiddleware;\n\nvar util = require ('../lib/gruntUtil')\n  , path = require ('path')\n  , NL = util.NL\n  , MATCH_PATH_SEP = new RegExp (util.escapeRegExp(path.sep), 'g');\n\n/**\n * Builds non-angular-module scripts.\n *\n * On release builds, this extension saves all non-module script files required by the application into a\n * single output file, in the correct loading order.\n *\n * On debug builds, it appends SCRIPT tags to the head of the html document, which will load the original\n * source scripts in the correct order.\n *\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction BuildForeignScriptsMiddleware (context)\n{\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.trace = function (module)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.build = function (targetScript)\n  {\n    // Output the standalone scripts (if any).\n    if (context.standaloneScripts.length) {\n\n      // Debug Build\n\n      if (context.options.debugBuild && context.options.debugBuild.enabled) {\n        var rep = context.options.debugBuild.rebaseDebugUrls;\n        context.prependOutput += (context.standaloneScripts.map (function (e)\n        {\n          var path = e.path.replace (MATCH_PATH_SEP, '/'); // Convert file paths to URLs.\n          if (rep)\n            for (var i = 0, m = rep.length; i < m; ++i)\n              path = path.replace (rep[i].match, rep[i].replaceWith);\n          if (path) // Ignore empty path; it means that this middleware should not output a script tag.\n            return util.sprintf ('<script src=\\\"%\\\"></script>', path);\n          return '';\n        })\n          .filter (function (x) {return x;}) // Remove empty paths.\n          .join ('\\\\\\n'));\n      }\n\n      // Release Build\n\n      else if (context.options.releaseBuild && context.options.releaseBuild.enabled) {\n        /** @type {string[]} */\n        var output = context.standaloneScripts.map (function (e) { return e.content; }).join (NL);\n\n        util.writeFile (targetScript, output);\n        //Note: the ensuing release/debug build step will append to the file created here.\n      }\n    }\n  };\n\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/exportRequiredStylesheets.js":"/**\n * Angular Builder middleware module.\n *\n * @module middleware/exportRequiredStylesheets\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar MATCH_DIRECTIVE = /\\/\\/#\\s*stylesheets?\\s*\\((.*?)\\)/g;\n\n//----------------------------------------------------------------------------------------------------------------------\n// OPTIONS\n//----------------------------------------------------------------------------------------------------------------------\n\n/**\n * Options specific to the Stylesheet References Handler middleware.\n * @constructor\n */\nfunction ExportRequiredStylesheetsOptions ()\n{}\n\nExportRequiredStylesheetsOptions.prototype = {\n  /**\n   * The name of the Gruntfile config property to where the list of required stylesheet paths will be exported.\n   * These stylesheets are those required by javascript files included in the build via build-directives.\n   * @type {string}\n   */\n  exportToConfigProperty: 'requiredStylesheets'\n};\n\n/**\n * @mixin\n */\nvar ExportRequiredStylesheetsOptionsMixin = {\n  /**\n   * Options specific to the Stylesheet References Handler middleware.\n   * @type {ExportRequiredStylesheetsOptions}\n   */\n  requiredStylesheets: new ExportRequiredStylesheetsOptions ()\n};\n\nexports.options = ExportRequiredStylesheetsOptionsMixin;\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexports.middleware = ExportRequiredStylesheetsMiddleware;\n\n/**\n * Exports to Grunt's global configuration the paths of all stylesheets required by the application,\n * in the order defined by the modules' dependency graph.\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction ExportRequiredStylesheetsMiddleware (context)\n{\n  var options = context.options.requiredStylesheets;\n  var path = require ('path');\n\n  /**\n   * Paths of the required stylesheets.\n   * @type {string[]}\n   */\n  var paths = [];\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.trace = function (/*ModuleDef*/ module)\n  {\n    scan (module.head, module.filePaths[0]);\n    module.bodies.forEach (function (path, i)\n    {\n      scan (path, module.filePaths[i + 1]);\n    });\n  };\n\n  this.build = function (targetScript)\n  {\n    /* jshint unused: vars */\n\n    // Export file paths.\n    context.grunt.config (options.exportToConfigProperty, paths);\n  };\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PRIVATE\n  //--------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Extracts file paths from embedded comment references to stylesheets and appends them to `paths`.\n   * @param {string} sourceCode\n   * @param {string} filePath\n   */\n  function scan (sourceCode, filePath)\n  {\n    /* jshint -W083 */\n    var match;\n    while ((match = MATCH_DIRECTIVE.exec (sourceCode))) {\n      match[1].split (',').forEach (function (s)\n      {\n        var url = s.match (/([\"'])(.*?)\\1/)[2];\n        paths.push (path.normalize (path.dirname (filePath) + '/' + url));\n      });\n    }\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/exportRequiredTemplates.js":"/**\n * Angular Builder middleware module.\n *\n * @module middleware/exportRequiredTemplates\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar MATCH_DIRECTIVE = /\\/\\/#\\s*templates?\\s*\\((.*?)\\)/g;\n\n//----------------------------------------------------------------------------------------------------------------------\n// OPTIONS\n//----------------------------------------------------------------------------------------------------------------------\n\n/**\n * Options specific to the Template References Handler middleware.\n * @constructor\n */\nfunction ExportRequiredTemplatesOptions ()\n{}\n\nExportRequiredTemplatesOptions.prototype = {\n  /**\n   * The name of the Gruntfile config property to where the list of required template paths will be exported.\n   * These HTML templates are those required by javascript files included in the build via build-directives.\n   * @type {string}\n   */\n  exportToConfigProperty: 'requiredTemplates'\n};\n\n/**\n * @mixin\n */\nvar ExportRequiredTemplatesOptionsMixin = {\n  /**\n   * Options specific to the Template References Handler middleware.\n   * @type {ExportRequiredTemplatesOptions}\n   */\n  requiredTemplates: new ExportRequiredTemplatesOptions ()\n};\n\nexports.options = ExportRequiredTemplatesOptionsMixin;\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexports.middleware = ExportRequiredTemplatesMiddleware;\n\n/**\n * Exports to Grunt's global configuration the paths of all templates required by the application,\n * in the order defined by the modules' dependency graph.\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction ExportRequiredTemplatesMiddleware (context)\n{\n  var options = context.options.requiredTemplates;\n  var path = require ('path');\n\n  /**\n   * Paths of the required templates.\n   * @type {string[]}\n   */\n  var paths = [];\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.trace = function (module)\n  {\n    scan (module.head, module.filePaths[0]);\n    module.bodies.forEach (function (path, i)\n    {\n      scan (path, module.filePaths[i + 1]);\n    });\n  };\n\n  this.build = function (targetScript)\n  {\n    /* jshint unused: vars */\n\n    // Export file paths.\n    context.grunt.config (options.exportToConfigProperty, paths);\n  };\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PRIVATE\n  //--------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Extracts file paths from embedded comment references to templates and appends them to `paths`.\n   * @param {string} sourceCode\n   * @param {string} filePath\n   */\n  function scan (sourceCode, filePath)\n  {\n    /* jshint -W083 */\n    var match;\n    while ((match = MATCH_DIRECTIVE.exec (sourceCode))) {\n      match[1].split (',').forEach (function (s)\n      {\n        var url = s.match (/([\"'])(.*?)\\1/)[2];\n        paths.push (path.normalize (path.dirname (filePath) + '/' + url));\n      });\n    }\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/exportSourcePaths.js":"/**\n * Angular Builder middleware module.\n *\n * @module middleware/exportSourcePaths\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar util = require ('../lib/gruntUtil')\n  , arrayAppend = util.arrayAppend;\n\n//----------------------------------------------------------------------------------------------------------------------\n// OPTIONS\n//----------------------------------------------------------------------------------------------------------------------\n\n/**\n * Options specific to the Source Code Paths Exporter middleware.\n * @constructor\n */\nfunction ExportSourcePathsOptions ()\n{}\n\nExportSourcePathsOptions.prototype = {\n  /**\n   * The name of the Gruntfile config property to where the list of required script paths will be exported.\n   * These scripts are all those that are actually required by your project, including forced includes and\n   * files included via build-directives.\n   * @type {string}\n   */\n  exportToConfigProperty: 'requiredScripts'\n};\n\n/**\n * @mixin\n */\nvar ExportSourcePathsOptionsMixin = {\n  /**\n   * Options specific to the Source Code Paths Exporter middleware.\n   * @type {ExportSourcePathsOptions}\n   */\n  sourcePaths: new ExportSourcePathsOptions ()\n};\n\nexports.options = ExportSourcePathsOptionsMixin;\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexports.middleware = ExportSourceCodePathsMiddleware;\n\n/**\n * Exports to Grunt's global configuration the paths of all script files that are required by the application,\n * in the order defined by the modules' dependency graph.\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction ExportSourceCodePathsMiddleware (context)\n{\n  var options = context.options.sourcePaths;\n  /**\n   * Paths of all the required files (excluding standalone scripts) in the correct loading order.\n   * @type {string[]}\n   */\n  var tracedPaths = [];\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.trace = function (module)\n  {\n    arrayAppend (tracedPaths, module.filePaths);\n  };\n\n  this.build = function (targetScript)\n  {\n    /* jshint unused: vars */\n\n    var scripts = [];\n\n    // Include paths of forced-include scripts.\n\n    if (context.standaloneScripts.length)\n      arrayAppend (scripts, context.standaloneScripts.map (function (e)\n      {\n        return e.path;\n      }));\n\n    // Include all module files.\n\n    arrayAppend (scripts, tracedPaths);\n\n    // Export.\n\n    context.grunt.config (options.exportToConfigProperty, scripts);\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/includeRequiredScripts.js":"/**\n * Angular Builder middleware module.\n *\n * @module middleware/includeRequiredScripts\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nexports.middleware = IncludeRequiredScriptsMiddleware;\n\nvar util = require ('../lib/gruntUtil');\n\nvar MATCH_DIRECTIVE = /\\/\\/#\\s*require\\s*\\((.*?)\\)/g;\n\n/**\n * Exports to the context the paths of all extra scripts required explicitly by build-directives,\n * in the order defined by the modules' dependency graph.\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction IncludeRequiredScriptsMiddleware (context)\n{\n  var path = require ('path');\n\n  /**\n   * Paths of the required scripts.\n   * @type {string[]}\n   */\n  var paths = [];\n\n  /**\n   * File content of the required scripts.\n   * @type {string[]}\n   */\n  var sources = [];\n\n  /**\n   * Map of required script paths, as they are being resolved.\n   * Prevents infinite recursion and redundant scans.\n   * Note: paths will be registered here *before* being added to `paths`.\n   * @type {Object.<string,boolean>}\n   */\n  var references = {};\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.trace = function (module)\n  {\n    util.info (\"Scanning <cyan>%</cyan> for non-angular script dependencies...\", module.name);\n    scan (module.head, module.filePaths[0]);\n    module.bodies.forEach (function (path, i)\n    {\n      scan (path, module.filePaths[i + 1]);\n    });\n  };\n\n  this.build = function (targetScript)\n  {\n    /* jshint unused: vars */\n\n    var scripts = paths.map (function (path, i)\n    {\n      return {\n        path:    path,\n        content: sources[i]\n      };\n    });\n    util.arrayAppend (context.standaloneScripts, scripts);\n    if (context.standaloneScripts.length) {\n      var list = context.standaloneScripts.map (\n        function (e, i) { return '  ' + (i + 1) + '. ' + e.path; }\n      ).join (util.NL);\n      util.info (\"Required non-angular scripts:%<cyan>%</cyan>\", util.NL, list);\n    }\n  };\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PRIVATE\n  //--------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Extracts file paths from embedded comment references to scripts and appends them to `paths`.\n   * @param {string} sourceCode\n   * @param {string} filePath\n   */\n  function scan (sourceCode, filePath)\n  {\n    /* jshint -W083 */\n    var match\n      , r = new RegExp (MATCH_DIRECTIVE);\n    while ((match = r.exec (sourceCode))) {\n      match[1].split (/\\s*,\\s*/).forEach (function (s)\n      {\n        var m = s.match (/([\"'])(.*?)\\1/);\n        if (!m)\n          util.warn ('syntax error on #script directive on argument ...<cyan> % </cyan>...%At <cyan>%</cyan>\\t',\n            s, util.NL, filePath);\n        else {\n          var url = m[2];\n          var requiredPath = path.normalize (path.dirname (filePath) + '/' + url);\n          // Check if this script was not already referenced.\n          if (!references[requiredPath]) {\n            references[requiredPath] = true;\n            var source = context.grunt.file.read (requiredPath);\n            // First, see if the required script has its own 'requires'.\n            // If so, they must be required *before* the current script.\n            scan (source, requiredPath);\n\n            // Let's register the dependency now.\n            paths.push (requiredPath);\n            sources.push (source);\n          }\n        }\n      });\n    }\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/makeDebugBuild.js":"/**\n * Angular Builder middleware module.\n *\n * @module middleware/makeDebugBuild\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar util = require ('../lib/gruntUtil')\n  , types = require ('../lib/types');\n\nvar ContextEvent = types.ContextEvent\n  , writeln = util.writeln\n  , NL = util.NL;\n\n//----------------------------------------------------------------------------------------------------------------------\n// OPTIONS\n//----------------------------------------------------------------------------------------------------------------------\n\n/**\n * Options specific to the debug builder middleware.\n * @constructor\n */\nfunction MakeDebugBuildOptions ()\n{}\n\nMakeDebugBuildOptions.prototype = {\n  /**\n   * Enables the Debug Builder.\n   *\n   * When false, no debug build will be generated.\n   * When true, the builder generates a set of &lt;script> tags to include all the required source files in the correct\n   * loading order.\n   *\n   * Note: The use of this setting as an option is, probably, not what you want.\n   * Use the `debug` task argument instead, as it allows using the same task target for both release and debug builds.\n   * @type {boolean}\n   */\n  enabled:         false,\n  /**\n   * Transform the generated debug URLs of the source files. It's an array of regexp match and replace records.\n   * @type {(Array.<{match:(RegExp|string),replaceWith:string}>|null)}\n   */\n  rebaseDebugUrls: null\n};\n\n/**\n * @mixin\n */\nvar MakeDebugBuildOptionsMixin = {\n  /**\n   * Options specific to the debug builder middleware.\n   * @type {MakeDebugBuildOptions}\n   */\n  debugBuild: new MakeDebugBuildOptions ()\n};\n\nexports.options = MakeDebugBuildOptionsMixin;\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexports.middleware = MakeDebugBuildMiddleware;\n\n/**\n * Generates a script file that inserts SCRIPT tags to the head of the html document, which will load the original\n * source scripts in the correct order. This is used on debug builds.\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction MakeDebugBuildMiddleware (context)\n{\n  var options = context.options.debugBuild;\n  /** @type {string[]} */\n  var traceOutput = [];\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // EVENTS\n  //--------------------------------------------------------------------------------------------------------------------\n\n  context.listen (ContextEvent.ON_AFTER_ANALYZE, function ()\n  {\n    if (options.enabled) {\n      var space = context.verbose ? NL : '';\n      writeln ('%Generating the <cyan>debug</cyan> build...%', space, space);\n    }\n  });\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.trace = function (/*ModuleDef*/ module)\n  {\n    if (!options.enabled) return;\n\n    var rep = options.rebaseDebugUrls;\n    module.filePaths.forEach (function (path)\n    {\n      if (rep)\n        for (var i = 0, m = rep.length; i < m; ++i)\n          path = path.replace (rep[i].match, rep[i].replaceWith);\n      if (path) // Ignore empty path; it means that this middleware should not output a script tag.\n        traceOutput.push (util.sprintf ('<script src=\\\"%\\\"></script>', path));\n    });\n  };\n\n  this.build = function (targetScript)\n  {\n    /* jshint unused: vars */\n\n    if (!options.enabled) return;\n\n    /** @type {string[]} */\n    var output = ['document.write (\\''];\n\n    if (context.prependOutput)\n      output.push (context.prependOutput);\n\n    // Output the modules (if any).\n    util.arrayAppend (output, traceOutput);\n\n    if (context.appendOutput)\n      output.push (context.appendOutput);\n\n    output.push ('\\');');\n    util.writeFile (targetScript, output.join ('\\\\\\n'));\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/makeReleaseBuild.js":"/**\n * Angular Builder middleware module.\n *\n * @module middleware/makeReleaseBuild\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar util = require ('../lib/gruntUtil')\n  , types = require ('../lib/types')\n  , sourceTrans = require ('../lib/sourceTrans')\n  , sourceExtract = require ('../lib/sourceExtract');\n\nvar indent = util.indent\n  , sprintf = util.sprintf\n  , csprintf = util.csprintf\n  , writeln = util.writeln\n  , warn = util.warn\n  , getExplanation = util.getExplanation\n  , reportErrorLocation = util.reportErrorLocation\n  , NL = util.NL\n  , ContextEvent = types.ContextEvent;\n\n/**\n * Error codes returned by some functions in this module.\n * @enum\n */\nvar STAT = {\n  OK:       0,\n  INDENTED: 1\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n// OPTIONS\n//----------------------------------------------------------------------------------------------------------------------\n\n/**\n * Options specific to the release builder middleware.\n * @constructor\n */\nfunction MakeReleaseBuildOptions ()\n{}\n\nMakeReleaseBuildOptions.prototype = {\n  /**\n   * Enables the Release Builder.\n   *\n   * When false, no release build will be generated.\n   * When true, the builder generates a single optimized javascript file with all required source code in the correct\n   * loading order.\n   *\n   * Note: The use of this setting as an option is, probably, not what you want.\n   * Use the `debug` task argument instead, as it allows using the same task target for both release and debug builds.\n   * @type {boolean}\n   */\n  enabled:          true,\n  /**\n   * Name of the variable representing the angular module being defined, to be used inside self-invoked anonymous\n   * functions.\n   * You may select another identifier if the default one causes a conflict with existing code.\n   * @type {string}\n   */\n  moduleVar:        'module',\n  /**\n   * When <code>true</code>, angular module references passed as arguments to self-invoking functions will be\n   * renamed to <code>config.moduleVar</code>.\n   *\n   * When <code>false</code>, if the module reference parameter has a name that is different from the one defined on\n   * <code>config.moduleVar</code>, a warning will be issued and the task may stop, unless the `--force` option is\n   * specified.\n   * @type {boolean}\n   */\n  renameModuleRefs: false,\n  /**\n   * Indentation white space for one level.\n   * You may, for instance, configure it for tabs or additional spaces.\n   * @type {string}\n   */\n  indent:           '  ',\n  /**\n   * This string will be appended to each module definition block.\n   * Use this to increase the readability of the generated script by visually separating each module from the previous\n   * one.\n   * @type {string}\n   */\n  moduleFooter:     NL + NL + NL\n};\n\n/**\n * @mixin\n */\nvar MakeReleaseBuildOptionsMixin = {\n  /**\n   * Options specific to the release builder middleware.\n   * @type {MakeReleaseBuildOptions}\n   */\n  releaseBuild: new MakeReleaseBuildOptions ()\n};\n\nexports.options = MakeReleaseBuildOptionsMixin;\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexports.middleware = MakeReleaseBuildMiddleware;\n\n/**\n * Saves all script files required by the specified module into a single output file, in the correct\n * loading order. This is used on release builds.\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction MakeReleaseBuildMiddleware (context)\n{\n  var options = context.options.releaseBuild;\n  /**\n   * Grunt's verbose output API.\n   * @type {Object}\n   */\n  var verboseOut = context.grunt.log.verbose;\n  /** @type {string[]} */\n  var traceOutput = [];\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // EVENTS\n  //--------------------------------------------------------------------------------------------------------------------\n\n  context.listen (ContextEvent.ON_AFTER_ANALYZE, function ()\n  {\n    if (options.enabled) {\n      var space = context.verbose ? NL : '';\n      writeln ('%Generating the <cyan>release</cyan> build...%', space, space);\n    }\n  });\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    /* jshint unused: vars */\n    // Do nothing\n  };\n\n  this.trace = function (/*ModuleDef*/ module)\n  {\n    if (!options.enabled) return;\n\n    // Fist process the head module declaration.\n    if (!module.head)\n      return util.warn ('Module <cyan>%</cyan> has no declaration.', module.name);\n    var head = optimize (module.head, module.filePaths[0], module);\n\n    // Prevent the creation of an empty (or comments-only) self-invoking function.\n    // In that case, the head content will be output without a wrapping closure.\n    if (!module.bodies.length && sourceExtract.matchWhiteSpaceOrComments (head.data)) {\n      // Output the comments (if any).\n      if (head.data.trim ())\n        traceOutput.push (head.data);\n      // Output a module declaration with no definitions.\n      traceOutput.push (sprintf ('angular.module (\\'%\\', %);%', module.name,\n          util.toQuotedList (module.requires), options.moduleFooter)\n      );\n    }\n    // Enclose the module contents in a self-invoking function which receives the module instance as an argument.\n    else {\n      // Begin closure.\n      traceOutput.push ('(function (' + options.moduleVar + ') {\\n');\n      // Insert module declaration.\n      traceOutput.push (conditionalIndent (head));\n      // Insert additional module definitions.\n      for (var i = 0, m = module.bodies.length; i < m; ++i) {\n        var body = optimize (module.bodies[i], module.filePaths[i + 1], module);\n        traceOutput.push (conditionalIndent (body));\n      }\n      // End closure.\n      traceOutput.push (sprintf ('\\n}) (angular.module (\\'%\\', %%));%', module.name,\n        util.toQuotedList (module.requires), module.configFn || '', options.moduleFooter));\n    }\n  };\n\n  this.build = function (targetScript)\n  {\n    if (!options.enabled) return;\n\n    if (context.prependOutput)\n      traceOutput.unshift (context.prependOutput);\n    if (context.appendOutput)\n      traceOutput.push (context.appendOutput);\n\n    util.writeFile (targetScript, traceOutput.join (NL));\n  };\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PRIVATE\n  //--------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Calls sourceTrans.optimize() and handles the result.\n   *\n   * @param {string} source\n   * @param {string} path For error messages.\n   * @param {ModuleDef} module\n   * @returns {OperationResult} The transformed source code.\n   * @throws Error Sanity check.\n   */\n  function optimize (source, path, module)\n  {\n    var result = sourceTrans.optimize (source, module.name, options.moduleVar);\n    var stat = sourceTrans.TRANS_STAT;\n    switch (result.status) {\n\n      case stat.OK:\n\n        //----------------------------------------------------------\n        // Module already enclosed in a closure with no arguments.\n        //----------------------------------------------------------\n        return /** @type {OperationResult} */ {\n          status: STAT.INDENTED,\n          data:   sourceTrans.renameModuleRefExps (module, options.indent + result.data, options.moduleVar)\n        };\n\n\n      case stat.NO_CLOSURE_FOUND:\n\n        //----------------------------------------------------------\n        // Unwrapped source code.\n        // It must be validated to make sure it's safe.\n        //----------------------------------------------------------\n        if (path)\n          verboseOut.write ('Validating ' + path.cyan + '...');\n        var valid = sourceTrans.validateUnwrappedCode (source);\n        if (valid)\n        // The code passed validation.\n          verboseOut.ok ();\n        else {\n          verboseOut.writeln ('FAILED'.yellow);\n          warnAboutGlobalCode (valid, path);\n          // If --force, continue.\n        }\n        // Either the code is valid or --force was used, so process it.\n        return /** @type {OperationResult} */ {\n          status: STAT.OK,\n          data:   sourceTrans.renameModuleRefExps (module, source, options.moduleVar)\n        };\n\n\n      case stat.RENAME_REQUIRED:\n\n        //----------------------------------------------------------\n        // Module already enclosed in a closure, with its reference\n        // passed in as the function's argument.\n        //----------------------------------------------------------\n        /** @type {ModuleClosureInfo} */\n        var modInfo = result.data;\n        if (!options.renameModuleRefs) {\n          warn ('The module variable reference <cyan>%</cyan> doesn\\'t match the preset name on the config setting ' +\n              '<cyan>moduleVar=\\'%\\'</cyan>.%%%',\n            modInfo.moduleVar, options.moduleVar, NL, reportErrorLocation (path),\n            getExplanation ('Either rename the variable or enable <cyan>renameModuleRefs</cyan>.')\n          );\n          // If --force, continue.\n        }\n        return /** @type {OperationResult} */ {\n          status: STAT.OK,\n          data:   sourceTrans.renameModuleVariableRefs (modInfo.closureBody, modInfo.moduleVar, options.moduleVar)\n        };\n\n\n      case stat.INVALID_DECLARATION:\n\n        warn ('Wrong module declaration: <cyan>%</cyan>', result.data);\n        // If --force, continue.\n        break;\n\n\n      default:\n        throw new Error ('Optimize failed. It returned ' + JSON.stringify (result));\n    }\n    // Optimization failed. Return the unaltered source code.\n    return /** @type {OperationResult} */ {status: STAT.OK, data: source};\n  }\n\n  /**\n   * Returns the given text indented unless it was already indented.\n   * @param {OperationResult} result\n   * @return {string}\n   */\n  function conditionalIndent (result)\n  {\n    return result.status === STAT.INDENTED ? result.data : indent (result.data, 1, options.indent);\n  }\n\n  /**\n   * Isses a warning about problematic code found on the global scope.\n   * @param {Object} sandbox\n   * @param {string} path\n   */\n  function warnAboutGlobalCode (sandbox, path)\n  {\n    var msg = csprintf ('yellow', 'Incompatible code found on the global scope!'.red + NL +\n      (path ? reportErrorLocation (path) : '') +\n        getExplanation (\n            'This kind of code will behave differently between release and debug builds.' + NL +\n            'You should wrap it in a self-invoking function and/or assign global variables/functions ' +\n            'directly to the window object.'\n        )\n    );\n    if (context.verbose) {\n      var found = false;\n      util.forEachProperty (sandbox, function (k, v)\n      {\n        if (!found) {\n          found = true;\n          msg += '  Detected globals:'.yellow + NL;\n        }\n        msg += (typeof v === 'function' ? '    function '.blue : '    var      '.blue) + k.cyan + NL;\n      });\n    }\n    warn (msg + '>>'.yellow);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-builder/node_modules/grunt-angular-builder/tasks/middleware/overrideDependencies.js":"/**\n * Angular Builder middleware module.\n *\n * @module middleware/overrideDependencies\n *\n * @license\n * Copyright 2013 Cláudio Manuel Brás da Silva\n * http://github.com/claudio-silva\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar util = require ('../lib/gruntUtil')\n  , types = require ('../lib/types');\n\nvar ModuleDef = types.ModuleDef\n  , sprintf = util.sprintf;\n\n//----------------------------------------------------------------------------------------------------------------------\n// OPTIONS\n//----------------------------------------------------------------------------------------------------------------------\n\n/**\n * Options specific to the Main Module Synthetizer middleware.\n * @constructor\n */\nfunction OverrideDependenciesOptions ()\n{}\n\nOverrideDependenciesOptions.prototype = {\n  /**\n   * A list of modules to be included in the build.\n   * This allows a task to synthesize the main module's dependencies.\n   * This is useful for building large applications that can have multiple alternative builds determined by the\n   * user's profile or other criteria.\n   *\n   * This list will be set as the main module's list of required modules.\n   * If it's empty, this functionality will be disabled and the build will be performed as usual.\n   * If it's not empty, a synthetic main module definition will be generated for both the release and the debug\n   * builds. You must <b>not</b> declare the main module in your application or, if you do, you must exclude\n   * the file that declares it from the task's source files set.\n   * The reason for this is that the generated main module declaration would collide with the one on the source code.\n   * You may still declare services, directives, etc. for the main module, using the\n   * <code>angular.module('name')</code> syntax, but you must not call the <code>module</code> method with more than one\n   * argument.\n   *\n   * Note that, to be included in the output, the modules on this list must have their source files located somewhere\n   * on the task's source paths.\n   *\n   * @type {string[]}\n   */\n  dependencies: []\n};\n\n/**\n * @mixin\n */\nvar OverrideDependenciesOptionsMixin = {\n  /**\n   * Options specific to the Override Dependencies middleware.\n   * @type {OverrideDependenciesOptions}\n   */\n  overrideDependencies: new OverrideDependenciesOptions ()\n};\n\nexports.options = OverrideDependenciesOptionsMixin;\n\n//----------------------------------------------------------------------------------------------------------------------\n\nexports.middleware = OverrideDependenciesMiddleware;\n\n/**\n * Allows the setting of the main module's dependencies via Grunt configuration options and synthetizes that module's\n * declaration javascript code.\n * @constructor\n * @implements {MiddlewareInterface}\n * @param {Context} context The execution context for the middleware stack.\n */\nfunction OverrideDependenciesMiddleware (context)\n{\n  /* jshint unused: vars */\n  var options = context.options.overrideDependencies\n    , enabled = options.dependencies && options.dependencies.length;\n\n  //--------------------------------------------------------------------------------------------------------------------\n  // PUBLIC API\n  //--------------------------------------------------------------------------------------------------------------------\n\n  this.analyze = function (filesArray)\n  {\n    /* jshint unused: vars */\n    if (!enabled) return;\n\n    var mainModuleName = context.options.mainModule;\n    var mainModule = context.modules[mainModuleName] = new ModuleDef (mainModuleName);\n    mainModule.requires = options.dependencies;\n    // Must define an empty path corresponding to the (non-existent) file that declared the module.\n    mainModule.filePaths = [''];\n    // Must set head to a non-empty string to mark the module as being initialized.\n    mainModule.head = ' ';\n  };\n\n  this.trace = function (module)\n  {\n    /* jshint unused: vars */\n  };\n\n  this.build = function (targetScript)\n  {\n    /* jshint unused: vars */\n    if (!enabled) return;\n\n    if (context.options.debugBuild && context.options.debugBuild.enabled) {\n      var declaration = sprintf (\"angular.module('%',%);\",\n        context.options.mainModule,\n        util.toQuotedList (options.dependencies)\n      );\n      context.appendOutput += sprintf ('<script>%</script>', declaration);\n    }\n  };\n}\n"}